
import "/webportal/pages/resources/concepts_nls.page"
import "/webportal/pages/resources/pages_nls.page"
import "/webportal/pages/styles/styles.page"
import "/webportal/pages/resources/pickers.page"
import "/webportal/pages/resources/mappings.page"
import "/webportal/pages/resources/reconciliation_dialogs.page"
import "/webportal/pages/resources/services.page"

accountSearchPage = Page {
	title: $search.account.title
	tags: "account", "conceptsearch" priority 200
	icon: "16/audit/account_16.png"
	large-icon: "48/red/account.png"
	description: $searchlabel.account

	initialUid = Parameter {
		type: String
		hidden: True 
	}
	
	useNavigatorMode = Parameter {
		type: Boolean
		hidden: True
		default: True
	}
	
	paramInitialIndex = Parameter {
		type: Integer
		hidden: True
	}
	
	accountSearch = SearchDefinition {
		entity: Account
		simple-mode-rule: br_account_simple_search
	}
	
	initialIndex = Variable {
		type: Integer
	}
	
	selectedAccountUid = Variable {
		type: String
	}

	showAnalytics = Variable {type:String initial:'0'}
	uids =  Variable {type:String multivalued:True}
	accountanalytics = Dataset {
		pages: Pages{tags: "account" and "byuids" }
	}

	accountData = Dataset {
		search: Search {
			definition: accountSearch
			view: br_account_searchpoint
		}
	}



	Grid {
		columns:GridColumn{width:grow}, GridColumn
		GridRow {
		GridCell {
			// Search section
			Group {
				layout: Layout { grab: horizontal True vertical False indent: horizontal 5 vertical 0 }
				SearchEdition {
					definition: accountSearch
					layout: Layout { grab: horizontal True vertical False }
					simple-mode-columns: 2
					simple-mode-layout: SimpleModeLayout {
						repository { label: $prepository.code break: True },
						login { label: $account.login },
						username { label: $account.username }
					}
				}
			}
			
			
			
			
			Group{
				layout: Layout { grab: horizontal True vertical True }
				Table {
					data: accountData
					show-count: True
					double-click: GoTo Activity Account Detail with selectedAccountUid to paramAccountUid, SerializeSearch accountSearch to accountSearch, useNavigatorMode to paramSearchMode, initialIndex to paramInitialIndex
					layout: Layout { grab: horizontal True vertical True }
					configurable: True
					persist-configuration: True
					initial-selection: initialUid using uid
					initial-selection-index: paramInitialIndex
					selection-index: initialIndex
					
					
					Column {
						column: uid
						hidden: True
						selection: selectedAccountUid
					}
					Column {
						column: login
						header: $account.login
						width: 100%
						
						initially-masked: False
					}
					Column {
						column: username
						header: $account.username
						width: 100%
						
						initially-masked: False
					}
					Column {
						column: lastlogindate
						header: $account.lastlogindate
						width: 100%
						
						initially-masked: False
					}
					Column {
						column: repository_displayname
						header: $prepository.displayname
						width: 100%
						
						initially-masked: False
					}
					Column {
						column: identity_hrcode
						header: $pidentity.hrcode
						width: 100%
						
						initially-masked: False
					}
					Column {
						column: identity_fullname
						header: $pidentity.fullname
						width: 100%
						
						initially-masked: False
					}
					Column {
						column: identifier
						header: $account.identifier
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: profile
						header: $account.profile
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: givenname
						header: $account.givenname
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: surname
						header: $account.surname
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: employeenumber
						header: $account.employeenumber
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: mail
						header: $account.mail
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: managerdata
						header: $account.managerdata
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: creationdate
						header: $account.creationdate
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: passwordlastsetdate
						header: $account.passwordlastsetdate
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: expiredate
						header: $account.expiredate
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: nextpwdchangedate
						header: $account.nextpwdchangedate
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: service
						header: $account.service
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: disabled
						header: $account.disabled
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: locked
						header: $account.locked
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: logincount
						header: $account.logincount
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: badpasswordcount
						header: $account.badpasswordcount
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: passwordnotrequired
						header: $account.passwordnotrequired
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: passwordcantchange
						header: $account.passwordcantchange
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: notnormalaccount
						header: $account.notnormalaccount
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: dontexpirepassword
						header: $account.dontexpirepassword
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: passwordexpired
						header: $account.passwordexpired
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: smartcardrequired
						header: $account.smartcardrequired
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: groupchanged
						header: $account.groupchanged
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: permissionchanged
						header: $account.permissionchanged
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: repository_code
						header: $prepository.code
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: recon_noownercode
						header: $preconciliation.noownercode
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: recon_reconciliationdate
						header: $preconciliation.reconciliationdate
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: recon_description
						header: $preconciliation.description
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: recon_comment
						header: $preconciliation.comment
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: recon_reliability
						header: $preconciliation.reliability
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: recon_rulename
						header: $preconciliation.rulename
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: recon_leavedate
						header: $preconciliation.leavedate
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: identity_givenname
						header: $pidentity.givenname
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: identity_surname
						header: $pidentity.surname
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: identity_mail
						header: $pidentity.mail
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: identity_phone
						header: $pidentity.phone
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: identity_mobile
						header: $pidentity.mobile
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: identity_arrivaldate
						header: $pidentity.arrivaldate
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: identity_departuredate
						header: $pidentity.departuredate
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: identity_active
						header: $pidentity.active
						width: 100%
						
						initially-masked: True
					}
					Column {
						column: identity_internal
						header: $pidentity.internal
						width: 100%
						
						initially-masked: True
					}
				}
			}
			
			
			Group{
				layout: Layout {align: horizontal End vertical Beginning grab: horizontal True vertical False }
				ButtonGroup {
					uniform:True
					
					Button {
						actions:StringCase(showAnalytics) { when "0" then [Set "1" to showAnalytics] when "1" then [Set "0" to showAnalytics]}  
						layout: Layout { grab: horizontal False vertical False hint: width 200}
						feature:accountsearch_analytics
						hidden: IntPredicate ( Count accountanalytics )  { when = 0 then True otherwise False }
						text: Transform showAnalytics using search_page_analyticsSectionMapping
					}
					Button {
						actions: GoTo Activity Account Detail with selectedAccountUid to paramAccountUid, SerializeSearch accountSearch to accountSearch, useNavigatorMode to paramSearchMode
						layout: Layout { grab: horizontal False vertical False hint: width 200}
					
						disabled: StringPredicate(selectedAccountUid) { when IsEmpty then True }
						text: $search_page.showdetails
					}
				}
			}
			
			
			Spacer {
				height:10
			}
		}
		GridCell {
			// Analytics section
			Group {
				hidden:StringPredicate(showAnalytics) { when '0' then True}
				layout:Layout{hint:width 320}
	
				Header {
					value:$search_page.analyticsreport
					styling:bigRedTitleStyle
					layout:Layout{align:horizontal Center vertical Center}
					tooltip:$search_page.analyticsreporttooltip
				}
				TemplateTable {
					data:accountanalytics
					layout:Layout{grab: horizontal True vertical True}
					row-height:82
					initial-sort:^priority
					pagination:6
					disabled:IntPredicate(Count accountData) {when =0 then True when >2001 then True}  //MAX AS OF SQL SERVER : 2100 parameters in Hibernate request
					show-filter:True			
					double-click:TransferData accountData(uid) to (uids), 
								 GoTo Dynamic (Current type, Current name) with uids to uids
					
					ImageCell {
						image:Current largeIcon
						top:0
						height:48
						left:136
						width:48
						on-click:
								TransferData accountData(uid) to (uids), 
								GoTo Dynamic (Current type, Current name) with uids to uids					
						}
					TextCell {
						column:title
						top:50
						height:32
						left:0
						width:320
						horizontal-align:Center
						filterable:True
						on-click:
								TransferData accountData(uid) to (uids), 
								GoTo Dynamic (Current type, Current name) with uids to uids
						/*
								TransferData identityData(uid) to (uids), 
									MultivaluedDistinct uids, MultivaluedRemove all '' from uids,
										IntCase(SizeOf uids) { 
											when =0 then [Message $search_page.analyticsreportnoentries]
											when <2001 then [GoTo Dynamic (Current type, Current name) with uids to uids] //MAX AS OF SQL SERVER : 2100 parameters in Hibernate request
											otherwise [Message $search_page.analyticsreporttoomanyentries]
										}
										*/
					
					}
				
				}
			}
		}	
		}
		}
}
