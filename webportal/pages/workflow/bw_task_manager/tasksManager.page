/**
 * Workflow tasks manager / 2015
 *
 * copyright Brainwave 2015
 */

import "/webportal/pages/styles/styles.page"
import "/webportal/pages/mixins/default_mixins.page"
import "/webportal/pages/resources/pages_nls.page"
import "/webportal/pages/resources/pickers.page"
import "/webportal/pages/resources/mappings.page"
import "/webportal/pages/resources/concepts_nls.page"

import "/webportal/pages/workflow/bw_task_manager/myprocesseslauncher.page"

TMdatePattern = Constant {type:String value:"yyyy-MM-dd"}
TMdatetimePattern = Constant {type:String value:"yyyy-MM-dd HH:mm:ss"}

TMinquirydialog_NLS = NLS{
	title  [en "Send a request by email" fr "Envoyer un message"]
	send [en "Send" fr "Envoyer"]
	sent [en "Mail sent to " fr "Message envoyé à "]
	cancel [en "Cancel" fr "Annuler"]
	too [ en "To" fr "A"]
	msgtitle [en "Title" fr "Titre"]
	msgbody [en "Message" fr "Message"]
}

TMreassignTask_NLS = NLS{
	title  [en "Reassign the task" fr "Réassigner la tâche"]
	description [en "Please pick an identity" fr "Veuillez choisir une personne"]
	tooltip [en "Pick an existing identity" fr "Sélectionner une personne existante"]
}

TMprocessCandidates_NLS = NLS{
	title  [en "Task candidates" fr "Personnes éligibles sur la tâche"]
	candidates [en "Candidates" fr "Personnes éligibles"]
	candidatesfortask [en "Candidates for task" fr "Personnes éligibles pour la tâche"]
	mailtext [en "Send an email to this candidate" fr "Envoyer un message à la personne"]
	mailtooltip [en "Send an email to this candidate" fr "Envoyer un message à la personne"]
	assigntext [en "Assign the task to this individual" fr "Affecter la tâche à cette personne"]
	assigntooltip [en "Assign the task to this individual" fr "Affecter la tâche à cette personne"]
	assignconfirm [en "Are you sure that you want to force this user to execute this task?" fr "Etes vous sur de bien vouloir affecter cette tâche à cette personne?"]
	assignconfirmed [en "Task reassigned to " fr "Tâche affectée à "]
}

TMtasksManager_NLS = NLS{
	title  [en "Tasks manager" fr "Gestionnaire de tâches"]
	tabinbox [en "Inbox" fr "Boite de réception"]
	tabassignedtasks [en "My tasks" fr "Mes tâches"]
	tabmyprocesses[en "My processes" fr "Mes processus"]
	tabmyarchives [en "My archives" fr "Mes archives"]
	taskassigned [en "Task assigned for the session duration" fr "Tâche assignée pour la durée de la session"]
	taskspending [en "Tasks pending" fr "Tâches en attente"]
	duedate [en "Due date" fr "date d'écheance"]
	starteddate [en "Started date" fr "date et heure de démarrage"]
	starteddatetime [en "Started datetime" fr "date de démarrage"]
	creationdate [en "Creation date" fr "Date de création"]
	creationdatetime [en "Creation datetime" fr "Date et heure de création"]
	duedatedyn [en "Due date {0}" fr "date d'écheance {0}"]
	starteddatedyn [en "Started date {0}" fr "date et heure de démarrage {0}"]
	starteddatetimedyn [en "Started datetime {0}" fr "date de démarrage {0}"]
	creationdatedyn [en "Creation date {0}" fr "Date de création {0}"]
	creationdatetimedyn [en "Creation datetime {0}" fr "Date et heure de création {0}"]
	escalatedtask [en "Escalated task !" fr "Tâche escaladée !"]
	associatedprocess [en "Associated process" fr "Processus associé"]
	name [en "Name" fr "Nom"]
	process [en "Process" fr "Processus"]
	createdby [en "Created by" fr "Crée par"]
	status [en "Status" fr "Statut"]
	version [en "Version" fr "Version"]
	candidates [en "Candidates" fr "Personnes éligibles"]
	emailtext [en "Send an email to this candidate" fr "Envoyer un message à cette personne"]
	emailtooltip [en "Send an email to this candidate" fr "Envoyer un message à cette personne"]
	taketask [en "Take the task" fr "Prendre la tâche"]
	updatetaskflash [en "Updating task" fr "Mettre à jour la tâche"]
	assignedtasks [en "Assigned tasks" fr "Tâches assignées"]
	taskreassignedto [en "Task reassigned to " fr "Tâche réassignée à "]
	reassign [en "Reassign" fr "Réassigner"]
	updatingtaskflash [en "Updating task" fr "Mise à jour de la tâche"]
	resume [en "Resume" fr "Continuer"]
	newprocess [en "Launch a new process instance" fr "Démarrer un nouveau processus"]
	processinfos [en "Process infos" fr "Informations sur le processus"]
	lastversion [en "Last version" fr "Dernière version"]
	publicationdate [en "Publication date" fr "Date de publication"]
	displaycandidates [en "Display the candidates" fr "Afficher les personnes éligibles"]
	sendmailowner [en "Send an email to the owner" fr "Envoyer un message au propriétaire"]
	reassigntasktext [en "Assign the task to a new individual" fr "Affecter cette tâche à une nouvelle personne"]
	reassigntasktooltip [en "Assign the task to a new individual" fr "Affecter cette tâche à une nouvelle personne"]
	taskreassignedflash [en "Task reassigned to " fr "Tâche réaffectée à "]
	tasktitle [en "Task title" fr "Titre de la tâche"]
	actor [en "Actor" fr "Acteur"]
	taskstatus [en "Task status" fr "Status de la tâche"]
	taskcreationdate [en "Task creation date" fr "Date de création de la tâche"]
	taskduedate [en "Task due date" fr "Date d'échéance de la tâche"]
	taskcompletedate [en "Task complete date" fr "Date de fin de la tâche"]
	processsuspendconfirmation [en "Are you sure that you want to suspend the process? All tasks will be suspended until the process is reactivated" 
	                            fr "Etes vous sur de bien vouloir suspendre ce processus? Toutes les tâches associées seront suspendues jusqu'à ce que le processus soit réactivé"]
	processsuspendflash [en "Process suspended" fr "Processus suspendu"]
	processsuspend [en "Suspend the process" fr "Suspendre le processus"]
	processresumeconfirmation [en "Are you sure that you want to resume the process?" fr "Etes vous sur que vous souhaitez réactiver le processus?"]
	processresumeflash [en "Process is resuming, this can take a few seconds" fr "Le processus se réactive, ceci peut prendre quelques secondes"]
	processresume [en "Resume the process" fr "Réactiver le processus"]
	processkillconfirmation [en "Killing the process will abort it brutally, are you sure that's what you really want? You should only abort a process when you started it by error" 
	                         fr "Arrêter le processus va l'interrompre brutalement, êtes vous sur que c'est bien ce que vous voulez faire ? Vous ne devriez n'arrêter que les processus que vous avez démarré par erreur"]
	processkillflash [en "Process killed" fr "Processus terminé"]
	processkill [en "Kill the process" fr "Terminer le processus"]
	completedate [en "Complete date" fr "Date de fin"]
	completedatetime [en "Complete datetime" fr "Date et heure de fin"]
	noduedate [en "No due date" fr "Pas d'écheance"]
	nocreationdate [en "No creation date" fr "Pas de date de création"]
	processPriority [en "Priority level" fr "Priorité"]
	prioritylow [en "low" fr "faible"]
	prioritymedium [en "medium" fr "moyenne"]
	priorityhigh [en "high" fr "haute"]
	priorityunknown [en "not set" fr "inconnue"]
	progress [en "Progress" fr "Progression"]
	subprocessesstate [en "Sub-processes status" fr "Etat des sous-processus"]
	subarchivesstate [en "Sub-processes status" fr "Etat des sous-processus"]
	archivereport [en "Display the synthesis" fr "Afficher la synthèse"]
	compliancereport [en "Download the compliance report" fr "Télécharger le rapport de conformité"]
	inforeport [en "Display details" fr "Afficher le détail"]
	
	inboxhelper [en "Click in the list to display the task details" fr "Cliquez pour afficher le détail"]
	taskhelper [en "Click in the list to display the task details" fr "Cliquez pour afficher le détail"]
	processhelper [en "Click in the list to display the process details" fr "Cliquez pour afficher le détail"]
	archivehelper [en "Click in the list to display the process details" fr "Cliquez pour afficher le détail"]
	
	grabanytasktext [en "Take this task" fr "Prendre cette tâche"]
	grabanytasktooltip [en "Take this task" fr "Prendre cette tâche"]
	grabanytaskconfirm [en "Are you sure that you want to take this task?" fr "Etes vous certain de vouloir prendre cette tâche ?"]
}

TMchildProcessStatus_NLS = NLS{
	title [en "Sub-processes progress status" fr "Etat d'avancement des sous-processus"]
}

TMchildArchiveStatus_NLS = NLS{
	title [en "Sub-processes progress status" fr "Etat d'avancement des sous-processus"]
}

dueDateMapping = StringMapping { when Not IsEmpty then $TMtasksManager_NLS.duedatedyn(current) otherwise $TMtasksManager_NLS.noduedate}
creationDateMapping = StringMapping { when Not IsEmpty then $TMtasksManager_NLS.creationdatedyn(current) otherwise $TMtasksManager_NLS.nocreationdate}
taskPriorityMapping = StringMapping { when "1" then $TMtasksManager_NLS.prioritylow when "2" then $TMtasksManager_NLS.prioritymedium when "3" then $TMtasksManager_NLS.priorityhigh otherwise $TMtasksManager_NLS.priorityunknown}


TMtaskprocessPriorityTemplate = StringImageTemplate {
	when '1' then "16/famfamfam_silk_icons_v013/tag_blue.png"
	when '2' then "16/famfamfam_silk_icons_v013/tag_orange.png"
	when '3' then "16/famfamfam_silk_icons_v013/tag_red.png"
	otherwise "otherwiseImage"
}

TMtaskStatusTemplate = StringImageTemplate {
	when 'Active' then "16/famfamfam_silk_icons_v013/control_play.png"
	when 'Completed' then "16/famfamfam_silk_icons_v013/accept.png"
	when 'Error' then "16/famfamfam_silk_icons_v013/cancel.png"
	when 'Suspended' then "16/famfamfam_silk_icons_v013/control_pause.png"
	otherwise "otherwiseImage"
}

TMprocessStatusTemplate = StringImageTemplate {
	when 'Active' then "16/famfamfam_silk_icons_v013/control_play.png"
	when 'Completed' then "16/famfamfam_silk_icons_v013/accept.png"
	when 'Error' then "16/famfamfam_silk_icons_v013/cancel.png"
	when 'Suspended' then "16/famfamfam_silk_icons_v013/control_pause.png"
	otherwise "otherwiseImage"
}



TMinquirydialog = Dialog {
	title:$TMinquirydialog_NLS.title
	buttons: [
		ActionButton {	text:$TMinquirydialog_NLS.send
						close:True
						actions:
							Set title to inquiryprocess.title,
							Set message to inquiryprocess.message,
							Set principal.mail to inquiryprocess.sendermail,
							Set principal.fullname to inquiryprocess.sendername,
							Set issuerUID to inquiryprocess.candidateuid,
							Set candidate.fullname to inquiryprocess.candidatename,
							Set processname to inquiryprocess.processname,
							Set processcreationdate to inquiryprocess.processcreationdate,
							Set processduedate to inquiryprocess.processduedate,
							Set processcompletedate to inquiryprocess.processcompletedate,
							Set processcreatorname to inquiryprocess.processcreatorname,
							Set taskname to inquiryprocess.taskname,
							Set taskcreationdate to inquiryprocess.taskcreationdate,
							Set taskduedate to inquiryprocess.taskduedate,
							Set taskcompletedate to inquiryprocess.taskcompletedate,
					        TaskComplete inquiryprocess,
					        Flash Information Concat($TMinquirydialog_NLS.sent, principal.fullname)
					  }
		ActionButton {	text:$TMinquirydialog_NLS.cancel
						close:True 
						actions:
							Set "" to inquiryprocess.candidateuid,
					        TaskCancel inquiryprocess
					  }
	]
	width: 450
	height: 300
	
	issuerUID = Variable
	title = Variable
	message = Variable
	processname = Variable
	processduedate = Variable
	processcompletedate = Variable
	processcreationdate = Variable
	taskname = Variable
	taskcreationdate = Variable
	taskduedate = Variable
	taskcompletedate = Variable
	processcreatorname = Variable
	
	principal = Record {
		view:getidentities
		with Principal.uid to uids
	}
	
	inquiryprocess = TaskRecord (create "taskinquiry")
	candidate = Record {
		view:getidentities with issuerUID to uids
		
	}
	
	Text {
	  label: $TMinquirydialog_NLS.too
	  value: Concat( candidate.fullname, " (", candidate.mail, ")")
	  compact: True
	}
	
	Edit {
		label:$TMinquirydialog_NLS.msgtitle
		variable:title
	}
	
	Edit {
		label:$TMinquirydialog_NLS.msgbody
		multi-lines:True
		layout:Layout{ grab:horizontal True vertical True }
		variable:message
	}
}

TMreassignTask = Dialog {
	title:$TMreassignTask_NLS.title
	buttons: [
		OkButton
		CancelButton
	]
	width: 450
	height: 200
	

	taskID = Variable {type:String}	// input parameter
	fullname = Variable {type:String}	
	uid = Variable {type:String}	
	
	Flow {
		Group {
			Text {
				value:$TMreassignTask_NLS.description
				compact:True
			}
			Edit {
				variable:fullname
				label:$identity.fullname
				disabled:True
				commands:
					Commands {
						orientation: Vertical
						position: After
						presentation: Icon
						Command {
							actions:
							Dialog identityPicker(uid from outUid, fullname from outDisplayname)
							tooltip: $TMreassignTask_NLS.tooltip
							icon:"16/audit/identity_16.png"
						}
				}
			}
		}	
	}
}

TMprocessCandidates = Dialog {
	title:$TMprocessCandidates_NLS.title

	buttons: [
		OkButton
	]
	width: 520
	height: 400

	taskID = Variable
	taskName = Variable
	taskStatus = Variable
	candidateUID = Variable
	candidateFullname = Variable

    candidates = Dataset {
    	view:getcandidates
    		with TaskInfo(task-id taskID, CandidatesUID) to uids
    }
	
	Group {
		title:$TMprocessCandidates_NLS.candidates
		Text {
			value:Concat($TMprocessCandidates_NLS.candidatesfortask," '",taskName,"'")
			compact:True
		}
		Table {
			data:candidates
			configurable:True
			layout:Layout {hint:height 200 grab: horizontal True vertical True}
			label: Label {break: True}
			commands: Commands {
				orientation: Vertical
				position: After
				presentation: Icon
				Command {
					text:$TMprocessCandidates_NLS.mailtext
					tooltip:$TMprocessCandidates_NLS.mailtooltip
					feature:tm_myprocess_cansendmailtocandidate
					icon:"16/famfamfam_silk_icons_v013/email.png"
					disabled: StringPredicate(candidateUID) {
						when IsEmpty then True
						otherwise False
					}
					actions:Dialog TMinquirydialog(candidateUID to issuerUID, 
												TaskInfo(task-id taskID, Title) to title,
												TaskInfo(task-id taskID, Title) to taskname,
												TaskInfo(task-id taskID, CreationDate) to taskcreationdate,
												TaskInfo(task-id taskID, DueDate) to taskduedate,
												TaskInfo(task-id taskID, ProcessTitle) to processname,
												TaskInfo(task-id taskID, ProcessCreationDate) to processcreationdate,
												TaskInfo(task-id taskID, ProcessDueDate) to processduedate,
												TaskInfo(task-id taskID, ProcessCreatorName) to processcreatorname
												)
				}
				Command {
					text:$TMprocessCandidates_NLS.assigntext
					tooltip:$TMprocessCandidates_NLS.assigntooltip
					icon:"16/famfamfam_silk_icons_v013/user_go.png"
					feature:tm_myprocess_canassigntasktocandidate
					disabled: StringPredicate(candidateUID) {
						when IsEmpty then True
						otherwise False
					}
					actions: Confirm $TMprocessCandidates_NLS.assignconfirm,
					Flash Concat($TMprocessCandidates_NLS.assignconfirmed,candidateFullname),
				    TaskReassign task-id taskID to candidateUID,
				    CloseDialog Ok
				}
			}
			
			Column {
				column:uid
				hidden:True
				selection:candidateUID
			}
			Column {
				column:hrcode
				header:$identity.hrcode
				sortable:True
			}
			Column {
				column:givenname
				header:$identity.givenname
				initially-masked:True
				sortable:True
			}
			Column {
				column:surname
				header:$identity.surname
				initially-masked:True
				sortable:True
			}
			Column {
				column:fullname
				header:$identity.fullname
				selection:candidateFullname
				sortable:True
			}
			Column {
				column:mail
				header:$identity.mail
				initially-masked:True
				sortable:True
			}
			Column {
				column:internal
				header:$identity.internal
				text: Transform Current internal using booleanDisplayMapping
				initially-masked:True
				sortable:True
			}
			Column {
				column:phone
				header:$identity.phone
				initially-masked:True
				sortable:True
			}
			Column {
				column:mobile
				header:$identity.mobile
				initially-masked:True
				sortable:True
			}
			Column {
				column:jobtitlecode
				header:$identity.jobtitlecode
				initially-masked:True
				sortable:True
			}
			Column {
				column:jobtitledisplayname
				header:$identity.jobtitledisplayname
				sortable:True
			}
			Column {
				column:organisationcode
				header:$organisation.code
				initially-masked:True
				sortable:True
			}
			Column {
				column:organisationshortname
				header:$organisation.shortname
				initially-masked:True
				sortable:True
			}
			Column {
				column:organisationdisplayname
				header:$organisation.displayname
				sortable:True
			}
		}
	}
}

TMchildProcessStatus = Dialog {
	title:$TMchildProcessStatus_NLS.title
	buttons: [ OkButton ]

	width: 640
	height: 300
	
	selectedProcess = Variable{type:String}

    childProcesses = Dataset {
    	processes: ProcessFilter {
    		creator:Principal.uid
    		show-completed:True
    		hide-active:False
    		show-error:True
    		show-suspended:True
    	}
    	includes: SameValuePredicate(Current processParentId, selectedProcess)
    }


	Text {
		iterate-on:childProcesses
		value:Current processName
		compact:True
		layout:Layout{hint:grab: horizontal True vertical True}
		decorator: Decorator {
	     after: Bar {
	      min-value: 0
	      max-value: ProcessInfo(process-id Current processId, ProgressTotal)
	      value: ProcessInfo(process-id Current processId, Progress)
	      threshold-normal: Product(ProcessInfo(process-id Current processId, ProgressTotal), "66%")
	      threshold-critical: Product(ProcessInfo(process-id Current processId, ProgressTotal), "33%")
	      higher-is-better:True
	      width: 200
	      tooltip: Concat(ProcessInfo(process-id Current processId, Progress),'/',ProcessInfo(process-id Current processId, ProgressTotal))
	     }
	     width: 380
	    }
	}
}

TMchildArchiveStatus = Dialog {
	title:$TMchildArchiveStatus_NLS.title
	buttons: [ OkButton ]
	
	width: 640
	height: 300

	selectedArchive = Variable{type:String}

    childArchives = Dataset {
    	processes: ProcessFilter {
    		creator:Principal.uid
    		show-completed:True
    		hide-active:True
    		show-error:False
    		show-suspended:False
    	}
    	includes: SameValuePredicate(Current processParentId, selectedArchive)
    }

	Grid {
		columns: GridColumn{width:grow}
		layout: Layout {grab: horizontal False vertical False}
		GridRowGroup { 
			iterate-on:childArchives
			GridRow { 
				GridCell {
					Text {
						value:Current processName
						compact:True
						layout:Layout{hint:grab: horizontal True vertical True}
						decorator: Decorator {
					     after: Bar {
					      min-value: 0
					      max-value: Current processProgressTotal
					      value: Current processProgress
					      threshold-normal: Product(Current processProgressTotal, "66%")
					      threshold-critical: Product(Current processProgressTotal, "33%")
					      higher-is-better:True
					      width: 200
					      tooltip: Concat(Current processProgress,'/',Current processProgressTotal)
					     }
					     width: 300
					    }
					}
				}
			}
		}
		GridRow {
			fill: True
		}
	}
}

/**
 * Task manager Page
 */
tasksManager = Page {
    title: $TMtasksManager_NLS.title
    tags: "admin"
    enter-event: IntCase (Count inboxTasks) {when = 0 then [Set $TMtasksManager_NLS.tabinbox to inboxLabel] otherwise [Set Concat($TMtasksManager_NLS.tabinbox," (",Count inboxTasks,")") to inboxLabel]},
    			 IntCase (Count assignedTasks) {when = 0 then [Set $TMtasksManager_NLS.tabassignedtasks to tasksLabel] otherwise [Set Concat($TMtasksManager_NLS.tabassignedtasks," (",Count assignedTasks,")") to tasksLabel]},
    			 IntCase (Count myrootProcesses) {when = 0 then [Set $TMtasksManager_NLS.tabmyprocesses to myprocessesLabel] otherwise [Set Concat($TMtasksManager_NLS.tabmyprocesses," (",Count myrootProcesses,")") to myprocessesLabel]},
    			 IntCase (Count myrootArchives) {when = 0 then [Set $TMtasksManager_NLS.tabmyarchives to myarchivesLabel] otherwise [Set Concat($TMtasksManager_NLS.tabmyarchives," (",Count myrootArchives,")") to myarchivesLabel]}
    		
    feature:tm_canaccesspage
    	
    inboxLabel = Variable{type:String multivalued:False}
    tasksLabel = Variable{type:String multivalued:False}
    myprocessesLabel = Variable{type:String multivalued:False}
    myarchivesLabel = Variable{type:String multivalued:False}
    
    selectedInboxTask = Variable { type: Integer }
    selectedAssignedTask = Variable { type: Integer }
    selectedProcess = Variable { type: Integer}
    selectedProcessName = Variable { type: String}
    selectedArchive = Variable { type: Integer}
    selectedArchiveName = Variable { type: String}

	reassignedIdentityUID = Variable {type:String}	
	reassignedIdentityName = Variable {type:String}

	candidateUID = Variable {type:String}

	myprocessSelectedTaskId = Variable { type:String }
	myprocessSelectedTaskName = Variable { type:String }
	myprocessSelectedTaskStatus = Variable { type:String }
	myprocessSelectedAssigneeName = Variable { type:String }
	myprocessSelectedAssigneeUid = Variable { type:String }

	myprocessArchiveSelectedTaskId = Variable { type:String }
	myprocessArchiveSelectedTaskName = Variable { type:String }
	myprocessArchiveSelectedTaskStatus = Variable { type:String }
	myprocessArchiveSelectedAssigneeName = Variable { type:String }
	myprocessArchiveSelectedAssigneeUid = Variable { type:String }

	processProgress = Variable {type:Integer }
	processProgressTotal = Variable {type:Integer }

	activeTabMyProcess = Variable {type:Boolean initial:False}
	activeTabMyArchive = Variable {type:Boolean initial:False}

    inboxTasks = Dataset {
        tasks: TaskFilter {
        	candidate:Principal.uid
        	show-completed:False
        	show-error:False
        	hide-active:False
        }
    }

    assignedTasks = Dataset {
        tasks: TaskFilter {
        	assignee:Principal.uid
        	show-completed:False
        	show-error:False
        	hide-active:False
        }
    }
    
    myProcesses = Dataset {
    	processes: ProcessFilter {
    		creator:Principal.uid
    		show-completed:True
    		hide-active:False
    		show-error:True
    		show-suspended:True
    		show-technical:False
    	}
       	excludes:
	    	AndPredicate { // exclude root completed processes 
		    	StringPredicate(Current processParentId) { when IsEmpty then True otherwise False}
				StringPredicate(Current processCompleteDate) { when Not IsEmpty then True otherwise False}
		    }
	}

    myrootProcesses = Dataset {
    	processes: ProcessFilter {
    		creator:Principal.uid
    		show-completed:False
    		hide-active:False
    		show-error:True
    		show-suspended:True
    		show-technical:False
    	}
    	includes: StringPredicate(Current processParentId) {
    		when IsEmpty then True otherwise False
    	}
    }

    myProcessesHierarchy = HierarchicalData {
    	dataset:myProcesses 
    		initial:processParentId IsNull
    		connect:parent processId to child processParentId   
    	disabled:Not BooleanPredicate(activeTabMyProcess)    
    }

    childProcesses = Dataset {
    	processes: ProcessFilter {
    		creator:Principal.uid
    		show-completed:False
    		hide-active:False
    		show-error:True
    		show-suspended:True
    		show-technical:False
    	}
    	includes: SameValuePredicate(Current processParentId, selectedProcess)
    }

    myArchives = Dataset {
    	processes: ProcessFilter {
    		creator:Principal.uid
    		show-completed:True
    		hide-active:False
    		show-error:False
    		show-suspended:True
    		show-technical:False
    	}
       	excludes:
	    	AndPredicate { // exclude root active processes 
		    	StringPredicate(Current processParentId) { when IsEmpty then True otherwise False}
				StringPredicate(Current processCompleteDate) { when IsEmpty then True otherwise False}
		    }
    }

    myrootArchives = Dataset {
    	processes: ProcessFilter {
    		creator:Principal.uid
    		show-completed:True
    		hide-active:True
    		show-error:False
    		show-suspended:False
    		show-technical:False
    	}
    	includes: StringPredicate(Current processParentId) {
    		when IsEmpty then True otherwise False
    	}
    }

    myArchivesHierarchy = HierarchicalData {
    	dataset:myArchives
    		initial:processParentId IsNull
    		connect:parent processId to child processParentId
    	disabled:Not BooleanPredicate(activeTabMyArchive)    
    }

    childArchives = Dataset {
    	processes: ProcessFilter {
    		creator:Principal.uid
    		show-completed:True
    		hide-active:True
    		show-error:False
    		show-suspended:False
    		show-technical:False
    	}
    	includes: SameValuePredicate(Current processParentId, selectedArchive)
    }
    
    candidates = Dataset {
    	view:getcandidates
    		with TaskInfo(task-id selectedInboxTask, CandidatesUID) to uids
    }
    
	myProcessesTasks = Dataset {
		tasks: TaskFilter {
			instance: selectedProcess
			mode: Supervision
			show-completed: True
			show-error: True
			hide-active: False			
		}		
	}

	myProcessArchivesTasks = Dataset {
		tasks: TaskFilter {
			instance: selectedArchive
			mode: Supervision
			show-completed: True
			show-error: True
			hide-active: False			
		}		
	}
	
	processticketlog = Record { 
		view:tm_getticketlogfromprocessid with selectedProcess to processid
	}
	ticketlog = Record { 
		view:tm_getticketlogfromprocessid with selectedArchive to processid
	}
	
    // --------------------------------------
    // Layout
    TabFolder {
    	// ---------------------------------------
    	// Inbox
    	TabItem {
    		text: inboxLabel
    		icon: "16/famfamfam_silk_icons_v013/email.png"
    		activation-event:	Set False to activeTabMyProcess,
    							Set False to activeTabMyArchive
    		

			Splitter {
				disposition:Horizontal
				size:30%
				Group {
				    Table {
				        data: inboxTasks
				        initial-sort: taskDueDate
				        configurable:True
				        show-filter:True
				        show-count:True
				        double-click:Flash $TMtasksManager_NLS.taskassigned, GoTo TaskPage selectedInboxTask
				        layout: Layout {grab: horizontal True vertical True }
						label: Label {break: True}
				        
				        Column {
				            column: taskId
				            hidden: True
				            selection: selectedInboxTask
				        }
				        Column {
				        	column:processPriority
				        	image: TemplateImageSelection (Current processPriority) using TMtaskprocessPriorityTemplate
				        	text:Transform Current processPriority using taskPriorityMapping
				            filterable:True
				            sortable:True
				            width: 80px
				            header:$TMtasksManager_NLS.processPriority
				        }
				        Column {
				            column: taskDueDate
				            initially-masked:True
				            sortable:True
				            text:DateLDAP(Current taskDueDate).value(Constant TMdatePattern) 
				        }
				        Column {
				            column: taskName
				            header:$TMtasksManager_NLS.taskspending
				            width: 100%
				            filterable:True
				            sortable:True
				        }
				        Column {
				        	column:processProgress
				        	hidden:True
				        	selection:processProgress
				        }
				        Column {
				        	column:processProgressTotal
				        	hidden:True
				        	selection:processProgressTotal
				        }
				    }
				}
				ConditionalGroup {
					StringCondition(selectedInboxTask) {
						when IsEmpty then [
							Grid {
								columns:GridColumn{},GridColumn{width:grow}
								GridRow {
									GridCell {
										Image { image:"various/arrow_left.png" }
									}
									GridCell {
										Text { value:"" compact:True}
										Text {
											value:$TMtasksManager_NLS.inboxhelper
											styling:hugeRedTitleStyle
											compact:True
										 }
									}
								} 
							}
						] when Not IsEmpty then [
							Grid {
								columns:GridColumn
								GridRow {
									GridCell {
										Grid {
											columns:GridColumn{width:64px},GridColumn{width:grow}
											GridRow {
												GridCell {
													Image { image:"48/others/kword_48.png" }
												}
												GridCell {
												    Text {
												        value: TaskInfo(task-id selectedInboxTask, Title)
														styling:hugeRedTitleStyle
												        compact:True
												    }
												}
											}
										}
									}
								}
								GridRow {
									GridCell {
										Spacer {
											height:8
										}
									}
								}
								GridRow {
									GridCell {
										Grid {
											columns:GridColumn{width:64px},GridColumn{width:32px},GridColumn{width:grow},GridColumn{width:32px},GridColumn{width:grow},GridColumn{width:32px},GridColumn{width:grow}
											// Due date and started date
											GridRow {
												height:32
												GridCell {}
												GridCell {
													Image { image:"16/famfamfam_silk_icons_v013/calendar.png" tooltip:$TMtasksManager_NLS.duedate }
												}
												GridCell {
													Text {
														value: Transform TaskInfo(task-id selectedInboxTask, DueDate) using dueDateMapping
														align:Left
														compact:True
													}
												
												}
												GridCell {
													Image { image:"16/famfamfam_silk_icons_v013/clock.png" tooltip:$TMtasksManager_NLS.starteddate }
												}
												GridCell {
													Text {
														value: Transform TaskInfo(task-id selectedInboxTask, CreationDate) using creationDateMapping
														align:Left
														compact:True
													}
												}
												GridCell {
													Image { 
														hidden: Not BooleanPredicate(TaskInfo(task-id selectedInboxTask,Escalated))
														image:"16/famfamfam_silk_icons_v013/error.png" tooltip:$TMtasksManager_NLS.escalatedtask
													}
												}
												GridCell {
													Text {
														hidden: Not BooleanPredicate(TaskInfo(task-id selectedInboxTask,Escalated))
														value:$TMtasksManager_NLS.escalatedtask
														align:Left
														compact:True
													}
												}
											
											}
										}
									}
								}
								GridRow {
									GridCell {
										Group {
											title:$TMtasksManager_NLS.associatedprocess
											Grid {
												columns:GridColumn,GridColumn
												GridRow {
													GridCell {
														Text {
															label: $TMtasksManager_NLS.name
															value: TaskInfo(task-id selectedInboxTask, ProcessDefinitionStaticTitle)
															compact:True 
															info-popup: processDescription_popup(TaskInfo(task-id selectedInboxTask, ProcessDescription) to description)
														}
														Text {
															label: $TMtasksManager_NLS.creationdate
															value: Transform[TaskInfo(task-id selectedInboxTask, ProcessCreationDate)] using mayBeNullMapping
															compact:True 
														}
														Text {
															label: $TMtasksManager_NLS.duedate
															value: Transform[TaskInfo(task-id selectedInboxTask, ProcessDueDate)] using mayBeNullMapping
															compact:True 
														}
														Text {
															label:$TMtasksManager_NLS.progress
															 decorator: Decorator {
														     after: Bar {
														      min-value: 0
														      max-value: processProgressTotal
														      value: processProgress
														      threshold-normal: Product(processProgressTotal, "66%")
														      threshold-critical: Product(processProgressTotal, "33%")
														      higher-is-better:True
														      width: 150
														      tooltip: Concat(processProgress,'/',processProgressTotal)
														     }
														     width: 150
														    }
														   hidden:
														   	OrPredicate {
															   IntPredicate (processProgressTotal) { when InvalidInteger then True otherwise False}
															   IntPredicate (processProgressTotal) { when =0 then True otherwise False}
														   	}
														   value:Concat(processProgress,'/',processProgressTotal)
														   compact:True 
														}
													}
													GridCell {
														Text {
															label: $TMtasksManager_NLS.createdby
															value: TaskInfo(task-id selectedInboxTask, ProcessCreatorName)
															compact:True 
															commands: Commands{
																		position:After 
																		Command{
															                icon:'16/famfamfam_silk_icons_v013/email.png'
															                feature:tm_mailbox_cansendmailtoprocessowner
																			actions:Dialog TMinquirydialog(TaskInfo(task-id selectedInboxTask, ProcessCreatorUID) to issuerUID, 
																										TaskInfo(task-id selectedInboxTask, Title) to title,
																										TaskInfo(task-id selectedInboxTask, Title) to taskname,
																										TaskInfo(task-id selectedInboxTask, CreationDate) to taskcreationdate,
																										TaskInfo(task-id selectedInboxTask, DueDate) to taskduedate,
																										TaskInfo(task-id selectedInboxTask, ProcessTitle) to processname,
																										TaskInfo(task-id selectedInboxTask, ProcessCreationDate) to processcreationdate,
																										TaskInfo(task-id selectedInboxTask, ProcessDueDate) to processduedate,
																										TaskInfo(task-id selectedInboxTask, ProcessCreatorName) to processcreatorname
																										)
														                 }
															           }
														} 
														Text {
															label: $TMtasksManager_NLS.status // Active, Completed, Error, Suspended
															value: TaskInfo(task-id selectedInboxTask, ProcessStatus)
															compact:True 
														} 
														Text {
															label: $TMtasksManager_NLS.version
															value: TaskInfo(task-id selectedInboxTask, ProcessDefinitionLastVersion)
															compact:True 
														} 
													}
												}
											
											}
										}
									}
								}
								GridRow {
									height:grow								
									GridCell {
										Group {
											title:$TMtasksManager_NLS.candidates
											Table {
												data:candidates
												configurable:True
												layout:Layout {hint:grab: horizontal True vertical True}
												label: Label {break: True}
												commands: Commands {
													orientation: Vertical
													position: After
													presentation: Icon
													Command {
														text:$TMtasksManager_NLS.emailtext
														tooltip:$TMtasksManager_NLS.emailtooltip
														icon:"16/famfamfam_silk_icons_v013/email.png"
														feature:tm_mailbox_cansendmailtocandidate
														disabled: StringPredicate(candidateUID) {
															when IsEmpty then True
															otherwise False
														}
														actions:Dialog TMinquirydialog(candidateUID to issuerUID, 
																					TaskInfo(task-id selectedInboxTask, Title) to title,
																					TaskInfo(task-id selectedInboxTask, Title) to taskname,
																					TaskInfo(task-id selectedInboxTask, CreationDate) to taskcreationdate,
																					TaskInfo(task-id selectedInboxTask, DueDate) to taskduedate,
																					TaskInfo(task-id selectedInboxTask, ProcessTitle) to processname,
																					TaskInfo(task-id selectedInboxTask, ProcessCreationDate) to processcreationdate,
																					TaskInfo(task-id selectedInboxTask, ProcessDueDate) to processduedate,
																					TaskInfo(task-id selectedInboxTask, ProcessCreatorName) to processcreatorname
																					)
													}
													Command {
														actions:Message "only for layouting"
														disabled:True
													}
												}
												
												Column {
													column:uid
													hidden:True
													selection:candidateUID
												}
												Column {
													column:hrcode
													header:$identity.hrcode
													sortable:True
												}
												Column {
													column:givenname
													header:$identity.givenname
													initially-masked:True
													sortable:True
												}
												Column {
													column:surname
													header:$identity.surname
													initially-masked:True
													sortable:True
												}
												Column {
													column:fullname
													header:$identity.fullname
													sortable:True
												}
												Column {
													column:mail
													header:$identity.mail
													initially-masked:True
													sortable:True
												}
												Column {
													column:internal
													header:$identity.internal
													text: Transform Current internal using booleanDisplayMapping
													initially-masked:True
													sortable:True
												}
												Column {
													column:phone
													header:$identity.phone
													initially-masked:True
													sortable:True
												}
												Column {
													column:mobile
													header:$identity.mobile
													initially-masked:True
													sortable:True
												}
												Column {
													column:jobtitlecode
													header:$identity.jobtitlecode
													initially-masked:True
													sortable:True
												}
												Column {
													column:jobtitledisplayname
													header:$identity.jobtitledisplayname
													sortable:True
												}
												Column {
													column:organisationcode
													header:$organisation.code
													initially-masked:True
													sortable:True
												}
												Column {
													column:organisationshortname
													header:$organisation.shortname
													initially-masked:True
													sortable:True
												}
												Column {
													column:organisationdisplayname
													header:$organisation.displayname
													sortable:True
												}
											}
										}
									}
								}
								GridRow {
									GridCell {
										Flow {
											disposition:Horizontal
											Group {
											
											}
											Group {
											
											}
											Group {
											
											}
											Group {
												Button {
													disabled:StringPredicate(TaskInfo(task-id selectedInboxTask, ProcessStatus)) { when "Active" then False otherwise True }
													actions:Flash $TMtasksManager_NLS.taskassigned, GoTo TaskPage selectedInboxTask  
													text:$TMtasksManager_NLS.taketask
													image:"16/famfamfam_silk_icons_v013/control_play.png"
												}
											}
										}
									}
								}
							}
						]
					}
				}
			
			}    	
		    
    	}
    	// ---------------------------------------
    	// Selected tasks
    	TabItem {
    		text:tasksLabel
    		icon:"16/others/kword_16.png"
    		activation-event:	Set False to activeTabMyProcess,
    							Set False to activeTabMyArchive

			Splitter {
				disposition:Horizontal
				size:30%
				Group {
				    Table {
				        data: assignedTasks
				        initial-sort: taskDueDate
				        configurable:True
				        show-filter:True
				        show-count:True
				        double-click:Flash $TMtasksManager_NLS.updatingtaskflash, GoTo TaskPage selectedAssignedTask
				        layout: Layout {grab: horizontal True vertical True }
						label: Label {break: True}
				        
				        Column {
				            column: taskId
				            hidden: True
				            selection: selectedAssignedTask
				        }
				        Column {
				        	column:taskStatus
				        	initially-masked:True
				        	header:$TMtasksManager_NLS.status
				        	sortable:True
				        	text:""
				        	image:TemplateImageSelection (Current taskStatus) using TMtaskStatusTemplate
				        	width:24px
				        }
				        Column {
				        	column:processPriority
				        	image: TemplateImageSelection (Current processPriority) using TMtaskprocessPriorityTemplate
				        	text:Transform Current processPriority using taskPriorityMapping
				            filterable:True
				            sortable:True
				            width: 80px
				            header:$TMtasksManager_NLS.processPriority
				        }
				        Column {
				            column: taskDueDate
				            initially-masked:True
				            sortable:True
				            text:DateLDAP(Current taskDueDate).value(Constant TMdatePattern) 
				        }
				        Column {
				            column: taskName
				            header:$TMtasksManager_NLS.assignedtasks
				            width: 100%
				            filterable:True
				            sortable:True
				        }
				        Column {
				        	column:processProgress
				        	hidden:True
				        	selection:processProgress
				        }
				        Column {
				        	column:processProgressTotal
				        	hidden:True
				        	selection:processProgressTotal
				        }
				    }
				}
				ConditionalGroup {
					StringCondition(selectedAssignedTask) {
						when IsEmpty then [
							Grid {
								columns:GridColumn{},GridColumn{width:grow}
								GridRow {
									GridCell {
										Image { image:"various/arrow_left.png" }
									}
									GridCell {
										Text { value:"" compact:True}
										Text {
											value:$TMtasksManager_NLS.taskhelper
											styling:hugeRedTitleStyle
											compact:True
										 }
									}
								} 
							}
						] when Not IsEmpty then [
							Grid {
								columns:GridColumn
								GridRow {
									GridCell {
										Grid {
											columns:GridColumn{width:64px},GridColumn{width:grow}
											GridRow {
												GridCell {
													Image { image:"48/others/kword_48.png" }
												}
												GridCell {
												    Text {
												        value: TaskInfo(task-id selectedAssignedTask, Title)
														styling:hugeRedTitleStyle
												        compact:True
												    }
												}
											}
										}
									}
								}
								GridRow {
									GridCell {
										Spacer {
											height:8
										}
									}
								}
								GridRow {
									GridCell {
										Grid {
											columns:GridColumn{width:64px},GridColumn{width:32px},GridColumn{width:grow},GridColumn{width:32px},GridColumn{width:grow},GridColumn{width:32px},GridColumn{width:grow}
											// Due date and started date
											GridRow {
												height:32
												GridCell {}
												GridCell {
													Image { image:"16/famfamfam_silk_icons_v013/calendar.png" tooltip:$TMtasksManager_NLS.duedate }
												}
												GridCell {
													Text {
														value: Transform TaskInfo(task-id selectedAssignedTask, DueDate) using dueDateMapping
														align:Left
														compact:True
													}
												
												}
												GridCell {
													Image { image:"16/famfamfam_silk_icons_v013/clock.png" tooltip:$TMtasksManager_NLS.starteddate }
												}
												GridCell {
													Text {
														value: Transform TaskInfo(task-id selectedAssignedTask, CreationDate) using creationDateMapping
														align:Left
														compact:True
													}
												}
												GridCell {
													Image { 
														hidden: Not BooleanPredicate(TaskInfo(task-id selectedAssignedTask,Escalated))
														image:"16/famfamfam_silk_icons_v013/error.png" tooltip:$TMtasksManager_NLS.escalatedtask
													}
												}
												GridCell {
													Text {
														hidden: Not BooleanPredicate(TaskInfo(task-id selectedAssignedTask,Escalated))
														value:$TMtasksManager_NLS.escalatedtask
														align:Left
														compact:True
													}
												}
											
											}
										}
									}
								}
								GridRow {
									GridCell {
										Group {
											title:$TMtasksManager_NLS.associatedprocess
											Grid {
												columns:GridColumn,GridColumn
												GridRow {
													GridCell {
														Text {
															label: $TMtasksManager_NLS.name
															value: TaskInfo(task-id selectedAssignedTask, ProcessTitle)
															compact:True 
															info-popup: processDescription_popup(TaskInfo(task-id selectedAssignedTask, ProcessDescription) to description)
														}
														Text {
															label: $TMtasksManager_NLS.creationdate
															value: Transform[TaskInfo(task-id selectedAssignedTask, ProcessCreationDate)] using mayBeNullMapping
															compact:True 
														}
														Text {
															label: $TMtasksManager_NLS.duedate
															value: Transform[TaskInfo(task-id selectedAssignedTask, ProcessDueDate)] using mayBeNullMapping
															compact:True 
														}
														Text {
															label:$TMtasksManager_NLS.progress
															 decorator: Decorator {
														     after: Bar {
														      min-value: 0
														      max-value: processProgressTotal
														      value: processProgress
														      threshold-normal: Product(processProgressTotal, "66%")
														      threshold-critical: Product(processProgressTotal, "66%")
														      higher-is-better:True
														      width: 150
														      tooltip: Concat(processProgress,'/',processProgressTotal)
														     }
														     width: 150
														    }
														   hidden:
														   	OrPredicate {
															   IntPredicate (processProgressTotal) { when InvalidInteger then True otherwise False}
															   IntPredicate (processProgressTotal) { when =0 then True otherwise False}
														   	}
														   value:Concat(processProgress,'/',processProgressTotal)
														   compact:True 
														}
													}
													GridCell {
														Text {
															label: $TMtasksManager_NLS.createdby
															value: TaskInfo(task-id selectedAssignedTask, ProcessCreatorName)
															compact:True 
															commands: Commands{
																		position:After 
																		Command{
															                icon:'16/famfamfam_silk_icons_v013/email.png'
															                feature:tm_mytasks_cansendmailtoprocessowner
																			actions:Dialog TMinquirydialog(TaskInfo(task-id selectedAssignedTask, ProcessCreatorUID) to issuerUID, 
																										TaskInfo(task-id selectedAssignedTask, Title) to title,
																										TaskInfo(task-id selectedAssignedTask, Title) to taskname,
																										TaskInfo(task-id selectedAssignedTask, CreationDate) to taskcreationdate,
																										TaskInfo(task-id selectedAssignedTask, DueDate) to taskduedate,
																										TaskInfo(task-id selectedAssignedTask, ProcessTitle) to processname,
																										TaskInfo(task-id selectedAssignedTask, ProcessCreationDate) to processcreationdate,
																										TaskInfo(task-id selectedAssignedTask, ProcessDueDate) to processduedate,
																										TaskInfo(task-id selectedAssignedTask, ProcessCreatorName) to processcreatorname
																										)
														                 }
															           }
														} 
														Text {
															label: $TMtasksManager_NLS.status
															value: TaskInfo(task-id selectedAssignedTask, ProcessStatus)
															compact:True 
														} 
														Text {
															label: $TMtasksManager_NLS.version
															value: TaskInfo(task-id selectedAssignedTask, ProcessDefinitionLastVersion)
															compact:True 
														} 
													}
												}
											
											}
										}
									}
								}
								GridRow {
									height:grow
									GridCell {
										Spacer {}
									}
								}
								GridRow {
									GridCell {
										Flow {
											disposition:Horizontal
											Group {
											
											}
											Group {
											
											}
											Group {
												Button {
													disabled:StringPredicate(TaskInfo(task-id selectedAssignedTask,Status)) { when "Active" then False otherwise True }
													feature:tm_mytasks_canreassign
													actions:Dialog TMreassignTask(reassignedIdentityUID from uid, reassignedIdentityName from fullname),
													Flash Concat($TMtasksManager_NLS.taskreassignedto,reassignedIdentityName),
												    TaskReassign task-id selectedAssignedTask to reassignedIdentityUID,
												    ReloadData (assignedTasks)
													text:$TMtasksManager_NLS.reassign
													image:"16/famfamfam_silk_icons_v013/user_go.png"
												}
											}
											Group {
												Button {
													disabled:StringPredicate(TaskInfo(task-id selectedAssignedTask,Status)) { when "Active" then False otherwise True }
													actions:Flash $TMtasksManager_NLS.updatingtaskflash, GoTo TaskPage selectedAssignedTask
													image:"16/famfamfam_silk_icons_v013/control_play.png"
													text:$TMtasksManager_NLS.resume
												}
											}
										}
									}
								}
							}
						]
					}
				}
			}    	
    	
    	}
    	// ---------------------------------------
    	// My processes
    	TabItem {
    		text:myprocessesLabel
    		icon:"16/famfamfam_silk_icons_v013/cog.png"
    		activation-event:	Set True to activeTabMyProcess,
    							Set False to activeTabMyArchive
    	
			Splitter {
				disposition:Horizontal
				size:30%
				// Master
				Group {
					Button {
						layout:Layout{grab:horizontal False vertical False}
						actions:GoTo Page myProcessLauncherPage
						text:$TMtasksManager_NLS.newprocess
						feature:tm_myprocess_canlaunchnewprocess
						image: "16/famfamfam_silk_icons_v013/add.png"
						
					}
					Spacer {
						height:8
					}
					Tree {
						data:myProcessesHierarchy
						layout: Layout {grab:horizontal True vertical True }
						label: Label {break: True}
						configurable:True
						show-filter:True
						selection-changed-event:Set ProcessInfo(process-id selectedProcess, ProgressTotal) to processProgressTotal, Set ProcessInfo(process-id selectedProcess, Progress) to processProgress  

				        Column {
				            column: processName
				            header:$TMtasksManager_NLS.name
				            width: 320px
				            filterable:True
				            sortable:True
				            selection: selectedProcessName // TODO: workaround car ProcessInfo(process-id selectedProcess, Title) ne renvoi pas bonne information  
				        }
				        Column {
				            column: processId
				            hidden:True
				            selection: selectedProcess
				        }
				        Column {
				        	column:processPriority
				        	image: TemplateImageSelection (Current processPriority) using TMtaskprocessPriorityTemplate
				        	text:Transform Current processPriority using taskPriorityMapping
				            filterable:True
				            sortable:True
				            width: 80px
				            header:$TMtasksManager_NLS.processPriority
				        }
				        Column {
				        	column: processStatus
				        	sortable:True
				        	image: TemplateImageSelection (Current processStatus) using TMprocessStatusTemplate
				        	//text:""
				        	header:$TMtasksManager_NLS.status
				        	width:80px
				            //initially-masked:True
				        }
				        Column {
				            column: processCreationDate
				            sortable:True
				            text: DateLDAP(Current processCreationDate).value(Constant TMdatePattern)
				            header:$TMtasksManager_NLS.creationdate
				            initially-masked:True
				        }
				        Column {
				            column: processCreationDate
				            sortable:True
				            text: DateLDAP(Current processCreationDate).value(Constant TMdatetimePattern)
				            header:$TMtasksManager_NLS.creationdatetime
				            initially-masked:True
				        }
				        Column {
				            column: processDueDate
				            sortable:True
				            text: DateLDAP(Current processDueDate).value(Constant TMdatePattern)
				            header:$TMtasksManager_NLS.duedate
				            initially-masked:True
				        }
				        Column {
				            column: processCompleteDate
				            sortable:True
				            text: DateLDAP(Current processCompleteDate).value(Constant TMdatePattern)
				            header:$TMtasksManager_NLS.completedate
				            initially-masked:True
				        }
					}
				}
				// Detail
				ConditionalGroup {
					StringCondition(selectedProcess) {
						when IsEmpty then [
							Grid {
								columns:GridColumn{},GridColumn{width:grow}
								GridRow {
									GridCell {
										Image { image:"various/arrow_left.png" }
									}
									GridCell {
										Text { value:"" compact:True}
										Text {
											value:$TMtasksManager_NLS.processhelper
											styling:hugeRedTitleStyle
											compact:True
										 }
									}
								} 
							}
						] when Not IsEmpty then [
							Grid {
								columns:GridColumn
								GridRow {
									GridCell {
										Grid {
											columns:GridColumn{width:64px},GridColumn{width:grow}
											GridRow {
												GridCell {
													Image { image:"48/objects/kservices_48.png" }
												}
												GridCell {
												    Text {
												        value: selectedProcessName // TODO: workaround car ProcessInfo(process-id selectedProcess, Title) ne renvoi pas la bonne information
														styling:hugeRedTitleStyle
												        compact:True
												    }
												}
											}
										}
									}
								}
								GridRow {
									GridCell {
										Spacer {
											height:8
										}
									}
								}
								GridRow {
									height:32
									GridCell {
										Grid {
											columns:GridColumn{width:64px},GridColumn{width:32px},GridColumn{width:grow},GridColumn{width:32px},GridColumn{width:grow},GridColumn{width:32px},GridColumn{width:grow}
											// Due date and started date
											GridRow {
												height:32
												GridCell {}
												GridCell {
													Image { image:"16/famfamfam_silk_icons_v013/calendar.png" tooltip:$TMtasksManager_NLS.duedate }
												}
												GridCell {
													Text {
														value: Transform ProcessInfo(process-id selectedProcess, DueDate) using dueDateMapping
														align:Left
														compact:True
													}
												
												}
												GridCell {
													Image { image:"16/famfamfam_silk_icons_v013/clock.png" tooltip:$TMtasksManager_NLS.starteddate }
												}
												GridCell {
													Text {
														value: Transform ProcessInfo(process-id selectedProcess, CreationDate) using creationDateMapping
														align:Left
														compact:True
													}
												}
												GridCell{
												}
												GridCell {
												}
											}
										}
									}
								}
								GridRow {
									GridCell {
										Group {
											title:$TMtasksManager_NLS.processinfos
											Grid {
												columns:GridColumn,GridColumn
												GridRow {
													GridCell {
														Text {
															label: $TMtasksManager_NLS.process
															value: ProcessInfo(process-id selectedProcess, DefinitionStaticTitle)
															compact:True
															info-popup: processDescription_popup(ProcessInfo(process-id selectedProcess, Description) to description)
														}
														Text {
															label: $TMtasksManager_NLS.createdby
															value: ProcessInfo(process-id selectedProcess, CreatorName)
															compact:True 
														} 
														Text {
															label: $TMtasksManager_NLS.status
															value: ProcessInfo(process-id selectedProcess, Status)
															compact:True 
														} 
														Text {
															label:$TMtasksManager_NLS.progress
															 decorator: Decorator {
														     after: Bar {
														      min-value: 0
														      max-value: processProgressTotal
														      value: processProgress
														      threshold-normal: Product(processProgressTotal, "66%")
														      threshold-critical: Product(processProgressTotal, "66%")
														      higher-is-better:True
														      width: 150
														      tooltip: Concat(processProgress,'/',processProgressTotal)
														     }
														     width: 150
														    }
														   hidden:
														   	OrPredicate {
															   IntPredicate (processProgressTotal) { when InvalidInteger then True otherwise False}
															   IntPredicate (processProgressTotal) { when =0 then True otherwise False}
														   	}
														   value:Concat(processProgress,'/',processProgressTotal)
														   compact:True 
														}
													}
													GridCell {
														Text {
															label: $TMtasksManager_NLS.version
															value: ProcessInfo(process-id selectedProcess, DefinitionVersion)
															compact:True 
														} 
														Text {
															label: $TMtasksManager_NLS.lastversion
															value: ProcessInfo(process-id selectedProcess, DefinitionLastVersion)
															compact:True 
														} 
														Text {
															label: $TMtasksManager_NLS.publicationdate
															value: ProcessInfo(process-id selectedProcess, DefinitionPublicationDate)
															compact:True 
														} 
													}
												}
											}
										}
									}
								}
								GridRow {
									height:grow
									GridCell {
										Table {
											data: myProcessesTasks
											initial-sort: taskCreationDate ascending	
											configurable:True			
											layout: Layout {
												grab: horizontal True vertical True
												minimal: height 120
											}
											label: Label {break: True}
											commands:Commands {
												orientation: Vertical
												position: After
												presentation: Icon
													disabled: StringPredicate(myprocessSelectedTaskStatus) {
														when "Active" then False
														otherwise True
													}
												Command{
													text:$TMtasksManager_NLS.displaycandidates
													tooltip:$TMtasksManager_NLS.displaycandidates
													icon:"16/audit/user_16.png"
													feature:tm_myprocess_canseetaskcandidates
													disabled: StringPredicate(myprocessSelectedTaskId) {
														when IsEmpty then True
														otherwise False
													}
													actions:Dialog TMprocessCandidates(myprocessSelectedTaskId to taskID, myprocessSelectedTaskName to taskName, myprocessSelectedTaskStatus to taskStatus)
												}
												Command {
													text:$TMtasksManager_NLS.sendmailowner
													tooltip:$TMtasksManager_NLS.sendmailowner
													icon:"16/famfamfam_silk_icons_v013/email.png"
													feature:tm_myprocess_cansendmailtoassignee
													disabled: 
													OrPredicate {
														StringPredicate(myprocessSelectedTaskStatus) {
														when "Active" then False
														otherwise True
														}
														StringPredicate(myprocessSelectedAssigneeUid) {
															when IsEmpty then True
															otherwise False
														}
													}
													actions:Dialog TMinquirydialog(myprocessSelectedAssigneeUid to issuerUID, 
																				TaskInfo(task-id myprocessSelectedTaskId, Title) to title,
																				TaskInfo(task-id myprocessSelectedTaskId, Title) to taskname,
																				TaskInfo(task-id myprocessSelectedTaskId, CreationDate) to taskcreationdate,
																				TaskInfo(task-id myprocessSelectedTaskId, DueDate) to taskduedate,
																				TaskInfo(task-id myprocessSelectedTaskId, ProcessTitle) to processname,
																				TaskInfo(task-id myprocessSelectedTaskId, ProcessCreationDate) to processcreationdate,
																				TaskInfo(task-id myprocessSelectedTaskId, ProcessDueDate) to processduedate,
																				TaskInfo(task-id myprocessSelectedTaskId, ProcessCreatorName) to processcreatorname
																				)
												}
												Command {
													text:$TMtasksManager_NLS.grabanytasktext
													tooltip:$TMtasksManager_NLS.grabanytasktooltip
													icon:"16/famfamfam_silk_icons_v013/star.png"
													feature:tm_myprocess_cangrabanytask
													disabled: 
													OrPredicate {
														StringPredicate(myprocessSelectedTaskStatus) {
														when "Active" then False
														otherwise True
														}
														StringPredicate(myprocessSelectedTaskId) {
															when IsEmpty then True
															otherwise False
														}
													}
													actions: Confirm $TMtasksManager_NLS.grabanytaskconfirm,
													Flash Concat($TMtasksManager_NLS.taskreassignedto,Principal.fullname),
												    TaskReassign task-id myprocessSelectedTaskId to Principal.uid,
												    ReloadData (myProcessesTasks)
												}
												Command {
													text:$TMtasksManager_NLS.reassigntasktext
													tooltip:$TMtasksManager_NLS.reassigntasktooltip
													icon:"16/famfamfam_silk_icons_v013/user_go.png"
													feature:tm_myprocess_canforcereassign
													disabled: 
													OrPredicate {
														StringPredicate(myprocessSelectedTaskStatus) {
														when "Active" then False
														otherwise True
														}
														StringPredicate(myprocessSelectedTaskId) {
															when IsEmpty then True
															otherwise False
														}
													}
													actions: Dialog TMreassignTask(reassignedIdentityUID from uid, reassignedIdentityName from fullname),
													Flash Concat($TMtasksManager_NLS.taskreassignedto,reassignedIdentityName),
												    TaskReassign task-id myprocessSelectedTaskId to reassignedIdentityUID,
												    ReloadData (myProcessesTasks)
												}
											}
											
											Column {
												column: taskId
												selection: myprocessSelectedTaskId
												hidden: True
												filterable: False			
											}		
											Column {
												column: taskName
												selection: myprocessSelectedTaskName
												header: $TMtasksManager_NLS.tasktitle
												sortable: True
												filterable: True
												width: 100%	
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
											Column {
												column: taskAssigneeUid
												selection: myprocessSelectedAssigneeUid
												hidden: True
											}
											Column {
												column: taskAssigneeName
												selection: myprocessSelectedAssigneeName
												header: $TMtasksManager_NLS.actor
												sortable: True
												filterable: True
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
											Column {
												column: taskStatus
												selection: myprocessSelectedTaskStatus
												header: $TMtasksManager_NLS.taskstatus
												sortable: True
												filterable: False
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
											Column {
												column: taskCreationDate
												text: DateLDAP(Current taskCreationDate).value(Constant TMdatePattern)
												header: $TMtasksManager_NLS.taskcreationdate
												sortable: True
												filterable: False
												align: Center
												width:140px
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
											Column {
												column: taskDueDate
												text: DateLDAP(Current taskDueDate).value(Constant TMdatePattern)
												header: $TMtasksManager_NLS.taskduedate
												sortable: True
												filterable: False
												initially-masked:True
												align: Center
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
											Column {
												column:taskCompleteDate
												text: DateLDAP(Current taskCompleteDate).value(Constant TMdatePattern)
												header: $TMtasksManager_NLS.taskcompletedate
												sortable: True
												filterable: False
												initially-masked:True
												align: Center
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
										}
									}
								}
								GridRow {
									GridCell {
										Flow {
											disposition:Horizontal
											Group {
											
											}
											Group {
											
											}
											Group {
												ConditionalGroup {
													StringCondition(ProcessInfo(process-id selectedProcess,Status)) { 
														when "Active" then [
															Button {
																actions:Confirm $TMtasksManager_NLS.processsuspendconfirmation, ProcessSuspend process-id selectedProcess, 
																        Flash $TMtasksManager_NLS.processsuspendflash, ReloadData (myProcesses)
																feature:tm_myprocess_cansuspend
																image:"16/famfamfam_silk_icons_v013/control_pause.png"
																text:$TMtasksManager_NLS.processsuspend
															}
														]
														when "Suspended" then [
															Button {
																actions:Confirm $TMtasksManager_NLS.processresumeconfirmation, ProcessResume process-id selectedProcess, 
																        Flash $TMtasksManager_NLS.processresumeflash, ReloadData (myProcesses)
																feature:tm_myprocess_cansuspend
																image:"16/famfamfam_silk_icons_v013/control_play.png"
																text:$TMtasksManager_NLS.processresume
															}
														]
													}
												}
											}
											Group {
												Button {
													actions:Confirm $TMtasksManager_NLS.processkillconfirmation, ProcessTerminate process-id selectedProcess, 
													        Flash $TMtasksManager_NLS.processkillflash, ReloadData (myProcesses)
													feature:tm_myprocess_canstop
													image:"16/famfamfam_silk_icons_v013/cancel.png"
													text:$TMtasksManager_NLS.processkill
												}
											}
											Group {
												Button {
													text:$TMtasksManager_NLS.inforeport
													image:"16/famfamfam_silk_icons_v013/report.png"
													actions:GoTo ProcessInfoPage selectedProcess
													disabled:Not BooleanPredicate(ProcessInfo(process-id selectedProcess, InfoPageDefined)) 
												}
											}
											Group {
												Button {
													text:$TMtasksManager_NLS.compliancereport
													image:"16/famfamfam_silk_icons_v013/report.png"
													actions:DownloadComplianceReport processticketlog.recorduid
													disabled:Not HasComplianceReportPredicate (processticketlog.recorduid) 
												}
											}
											Group {
												Button {
													disabled:OrPredicate {
														StringPredicate(selectedProcess) { when IsNull then True otherwise False}
														IntPredicate(Count childProcesses) { when =0 then True otherwise False}
													}
													text:$TMtasksManager_NLS.subprocessesstate
													image:"16/famfamfam_silk_icons_v013/help.png"
													actions:Dialog TMchildProcessStatus (selectedProcess to selectedProcess)
												}
											}
										}
									}
								}
							}
						]
					}
				} 

			}   	
    	}
    
    	// ---------------------------------------
    	// My archived processes
    	TabItem {
    		text:myarchivesLabel
    		icon:"16/famfamfam_silk_icons_v013/database.png"
    		activation-event:	Set False to activeTabMyProcess,
    							Set True to activeTabMyArchive
    		
			Splitter {
				disposition:Horizontal
				size:30%
				Group {
					Tree {
						data: myArchivesHierarchy
						layout: Layout {grab:horizontal True vertical True }
						label: Label {break: True}
						configurable:True
						show-filter:True
						selection-changed-event:Set ProcessInfo(process-id selectedArchive, ProgressTotal) to processProgressTotal, Set ProcessInfo(process-id selectedArchive, Progress) to processProgress  
											
				        Column {
				            column: processName
				            header:$TMtasksManager_NLS.name
				            width: 320px
				            filterable:True
				            sortable:True
				            selection: selectedArchiveName // TODO: workaround car ProcessInfo(process-id selectedArchive, Title) ne renvoi pas la bonne valeur
				        }
				        Column {
				            column: processId
				            hidden: True
				            selection: selectedArchive
				        }
				        Column {
				        	column:processPriority
				        	image: TemplateImageSelection (Current processPriority) using TMtaskprocessPriorityTemplate
				        	text:Transform Current processPriority using taskPriorityMapping
				            filterable:True
				            sortable:True
				            width: 80px
				            header:$TMtasksManager_NLS.processPriority
				        }
				        Column {
				        	column: processStatus
				        	sortable:True
				        	image: TemplateImageSelection (Current processStatus) using TMprocessStatusTemplate
				        	//text:""
				        	header:$TMtasksManager_NLS.status
				        	//initially-masked:True
				        	width:80px
				        }
				        Column {
				            column: processCreationDate
				            initially-masked:True
				            sortable:True
				            text: DateLDAP(Current processCreationDate).value(Constant TMdatePattern)
				            header:$TMtasksManager_NLS.creationdate
				        }
				        Column {
				            column: processCreationDate
				            initially-masked:True
				            sortable:True
				            text: DateLDAP(Current processCreationDate).value(Constant TMdatetimePattern)
				            header:$TMtasksManager_NLS.creationdatetime
				        }
				        Column {
				            column: processDueDate
				            initially-masked:True
				            sortable:True
				            text: DateLDAP(Current processDueDate).value(Constant TMdatePattern)
				            header:$TMtasksManager_NLS.duedate
				        }
				        Column {
				            column: processCompleteDate
				            initially-masked:True
				            sortable:True
				            text: DateLDAP(Current processCompleteDate).value(Constant TMdatePattern)
				            header:$TMtasksManager_NLS.completedate
				        }
				        Column {
				            column: processCompleteDate
				            initially-masked:True
				            sortable:True
				            text: DateLDAP(Current processCompleteDate).value(Constant TMdatetimePattern)
				            header:$TMtasksManager_NLS.completedatetime
				        }
					}
				}
				
				ConditionalGroup {
					StringCondition(selectedArchive) {
						when IsEmpty then [
							Grid {
								columns:GridColumn{},GridColumn{width:grow}
								GridRow {
									GridCell {
										Image { image:"various/arrow_left.png" }
									}
									GridCell {
										Text { value:"" compact:True}
										Text {
											value:$TMtasksManager_NLS.archivehelper
											styling:hugeRedTitleStyle
											compact:True
										 }
									}
								} 
							}
						] when Not IsEmpty then [
							Grid {
								columns:GridColumn
								GridRow {
									GridCell {
										Grid {
											columns:GridColumn{width:64px},GridColumn{width:grow}
											GridRow {
												GridCell {
													Image { image:"48/objects/kservices_48.png" }
												}
												GridCell {
												    Text {
												        value: selectedArchiveName 
														styling:hugeRedTitleStyle
												        compact:True
												    }
												}
											}
										}
									}
								}
								GridRow {
									GridCell {
										Spacer {
											height:8
										}
									}
								}
								GridRow {
									height:32
									GridCell {
										Grid {
											columns:GridColumn{width:64px},GridColumn{width:32px},GridColumn{width:grow},GridColumn{width:32px},GridColumn{width:grow},GridColumn{width:32px},GridColumn{width:grow}
											// Due date and started date
											GridRow {
												height:32
												GridCell {}
												GridCell {
													Image { image:"16/famfamfam_silk_icons_v013/calendar.png" tooltip:"Due date" }
												}
												GridCell {
													Text {
														value: Transform ProcessInfo(process-id selectedArchive, DueDate) using dueDateMapping
														align:Left
														compact:True
													}
												
												}
												GridCell {
													Image { image:"16/famfamfam_silk_icons_v013/clock.png" tooltip:"Started date" }
												}
												GridCell {
													Text {
														value: Transform ProcessInfo(process-id selectedArchive, CreationDate) using creationDateMapping
														align:Left
														compact:True
													}
												}
												GridCell{
												}
												GridCell {
												}
											}
										}
									}
								}
								GridRow {
									GridCell {
										Group {
											title:$TMtasksManager_NLS.processinfos
											Grid {
												columns:GridColumn,GridColumn
												GridRow {
													GridCell {
														Text {
															label: $TMtasksManager_NLS.process
															value: ProcessInfo(process-id selectedArchive, DefinitionStaticTitle)
															compact:True
															info-popup: processDescription_popup(ProcessInfo(process-id selectedArchive, Description) to description)
														}
														Text {
															label: $TMtasksManager_NLS.createdby
															value: ProcessInfo(process-id selectedArchive, CreatorName)
															compact:True 
														} 
														Text {
															label: $TMtasksManager_NLS.status
															value: ProcessInfo(process-id selectedArchive, Status)
															compact:True 
														} 
														Text {
															label: $TMtasksManager_NLS.completedate
															value: ProcessInfo(process-id selectedArchive, CompleteDate)
															compact:True 
														} 
														Text {
															label:$TMtasksManager_NLS.progress
															 decorator: Decorator {
														     after: Bar {
														      min-value: 0
														      max-value: processProgressTotal
														      value: processProgress
														      threshold-normal: Product(processProgressTotal, "66%")
														      threshold-critical: Product(processProgressTotal, "33%")
														      higher-is-better:True
														      width: 150
														      tooltip: Concat(processProgress,'/',processProgressTotal)
														     }
														     width: 150
														    }
														   hidden:
														   	OrPredicate {
															   IntPredicate (processProgressTotal) { when InvalidInteger then True otherwise False}
															   IntPredicate (processProgressTotal) { when =0 then True otherwise False}
														   	}
														   value:Concat(processProgress,'/',processProgressTotal)
														   compact:True 
														}
													}
													GridCell {
														Text {
															label: $TMtasksManager_NLS.version
															value: ProcessInfo(process-id selectedArchive, DefinitionVersion)
															compact:True 
														} 
														Text {
															label: $TMtasksManager_NLS.lastversion
															value: ProcessInfo(process-id selectedArchive, DefinitionLastVersion)
															compact:True 
														} 
														Text {
															label: $TMtasksManager_NLS.publicationdate
															value: ProcessInfo(process-id selectedArchive, DefinitionPublicationDate)
															compact:True 
														} 
													}
												}
											}
										}
									}
								}
								GridRow {
									height:grow
									GridCell {
										Table {
											data: myProcessArchivesTasks
											initial-sort: taskCreationDate ascending	
											configurable:True			
											layout: Layout {
												grab: horizontal True vertical True
												minimal: height 120
											}
											label: Label {break: True}
											commands:Commands {
												orientation: Vertical
												position: After
												presentation: Icon
												Command {
													text:$TMtasksManager_NLS.sendmailowner
													tooltip:$TMtasksManager_NLS.sendmailowner
													icon:"16/famfamfam_silk_icons_v013/email.png"
													feature:tm_myarchive_cansendmailtoassignee
													disabled: 
													OrPredicate {
														StringPredicate(myprocessArchiveSelectedTaskStatus) {
														when "Completed" then False
														otherwise True
														}
														StringPredicate(myprocessArchiveSelectedAssigneeUid) {
															when IsEmpty then True
															otherwise False
														}
													}
													actions:Dialog TMinquirydialog(myprocessArchiveSelectedAssigneeUid to issuerUID, 
																				TaskInfo(task-id myprocessArchiveSelectedTaskId, Title) to title,
																				TaskInfo(task-id myprocessArchiveSelectedTaskId, Title) to taskname,
																				TaskInfo(task-id myprocessArchiveSelectedTaskId, CreationDate) to taskcreationdate,
																				TaskInfo(task-id myprocessArchiveSelectedTaskId, DueDate) to taskduedate,
																				TaskInfo(task-id myprocessArchiveSelectedTaskId, ProcessTitle) to processname,
																				TaskInfo(task-id myprocessArchiveSelectedTaskId, ProcessCreationDate) to processcreationdate,
																				TaskInfo(task-id myprocessArchiveSelectedTaskId, ProcessDueDate) to processduedate,
																				TaskInfo(task-id myprocessArchiveSelectedTaskId, ProcessCreatorName) to processcreatorname
																				)
												}
												Command {
													disabled:True
													actions:Message "Layout only"
												}
											}
											
											Column {
												column: taskId
												selection: myprocessArchiveSelectedTaskId
												hidden: True
												filterable: False			
											}		
											Column {
												column: taskName
												selection: myprocessArchiveSelectedTaskName
												header: $TMtasksManager_NLS.tasktitle
												sortable: True
												filterable: True
												width: 100%	
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
											Column {
												column: taskAssigneeUid
												selection: myprocessArchiveSelectedAssigneeUid
												hidden: True
											}
											Column {
												column: taskAssigneeName
												selection: myprocessArchiveSelectedAssigneeName
												header: $TMtasksManager_NLS.actor
												sortable: True
												filterable: True
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
											Column {
												column: taskStatus
												selection: myprocessArchiveSelectedTaskStatus
												header: $TMtasksManager_NLS.taskstatus
												sortable: True
												filterable: False
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
											Column {
												column: taskCreationDate
												text: DateLDAP(Current taskCreationDate).value(Constant TMdatePattern)
												header: $TMtasksManager_NLS.taskcreationdate
												sortable: True
												filterable: False
												align: Center
												initially-masked:True
												width:140px
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
											Column {
												column:taskCompleteDate
												text: DateLDAP(Current taskCompleteDate).value(Constant TMdatePattern)
												header: $TMtasksManager_NLS.taskcompletedate
												sortable: True
												filterable: False
												width:140px
												align: Center
												styling: StringStyling (Current taskStatus) { when "Active" then emphasizeStyle }			
											}
										}
									}
								}
								GridRow {
									GridCell {
										Flow {
											disposition:Horizontal
											Group {
											}
											Group {
											}
											Group {
											}
											Group {
												Button {
													text:$TMtasksManager_NLS.archivereport
													image:"16/famfamfam_silk_icons_v013/report.png"
													actions:GoTo ProcessReportPage selectedArchive
													disabled:Not BooleanPredicate(ProcessInfo(process-id selectedArchive, ReportPageDefined)) 
												}
											}
											Group {
												Button {
													text:$TMtasksManager_NLS.compliancereport
													image:"16/famfamfam_silk_icons_v013/report.png"
													actions:DownloadComplianceReport ticketlog.recorduid
													disabled:Not HasComplianceReportPredicate (ticketlog.recorduid) 
												}
											}
											Group {
												Button {
													disabled:OrPredicate {
														StringPredicate(selectedArchive) { when IsNull then True otherwise False}
														IntPredicate(Count childArchives) { when =0 then True otherwise False}
													}
													text:$TMtasksManager_NLS.subarchivesstate
													image:"16/famfamfam_silk_icons_v013/help.png"
													actions:Dialog TMchildArchiveStatus (selectedArchive to selectedArchive)
												}
											}
										}
									}
								}
							}
						]
					}
				} 
			}   	
    	}
    }
}

processDescription_popup = InfoPopup {
	width: 600
	height:300

	description = Variable

	Text {
		value:description
		lines:20
		compact:True
	}
}