import "/webportal/pages/resources/reconciliation_dialogs.page"
import "/webportal/pages/resources/concepts_nls.page"
import "/webportal/pages/resources/services.page"
import "/webportal/pages/styles/styles.page"

bw_recon_review_standaloneNLS = NLS {
	title [en "Reconciliations" fr "Réconciliations"]
	recontype [en "Type of reconciliation" fr "Type de réconciliation"]
	repo [en "Repository" fr "Référentiel"]
	accounts [en "Accounts" fr "Comptes"]
	filterChooseOne [en "Filters (choose one)" fr "Filtres (un seul possible)"]
	identities [en "Suggested identities" fr "Identités suggérées"]
	manualrecon [en "Manual Reconciliation of selected account" fr "Réconciliation manuelle du compte sélectionné"]
	manualrecontt [en "Open the manual reconciliation dialog for the account selected above" fr "Ouvre la boite de dialogue de réconciliation manuelle pour le compte sélectionné ci-dessus"]
	idrecon [en "Reconcile selected account with selected identity" fr "Réconcilier le compte et l'identité sélectionné"]
	idrecontt [en "Reconcile the account selected on the left with the identity selected on the right" fr "Réconcilier le compte sélectionné à gauche avec l'identité sélectionnée à droite"]
	reconComment [en "Reconciliation Comment" fr "Commentaire de réconciliation"]
	confirmdialog [ en "Confirm the reconciliation" fr "Confirmer la réconciliation"]
	ok [en "Validate" fr "Valider"]
	sure [en "Confirm" fr "Confirmer"]
	suretxt [en "Are you sure you want to link the identity and account below ?" fr "Êtes vous certain de vouloir lier compte et identité ci-dessous ?"]
	allCriteria [en "All fields" fr "Tous critères"]
	requestRecon [en "Reconcile Account (if none of the suggested identities matches)" fr "Réconcilier le compte (si aucune des identités suggérées ne correspond)"]
	manualReconGp [en "Manual reconciliation between selected account and identity" fr "Réconciliation manuelle entre le compte et l'identité sélectionnés"]
	okCode [en "ok" fr "ok"]
	koCode [en "ko" fr "ko"]
	defaultNoOwner [en "leave" fr "leave"]
	notReconciled [en "Accounts not reconciled" fr "Comptes non réconciliés"]
	delCommentDefault [en "Manual request" fr "Demande manuelle"]
	reconCommentDefault [en "Manual reconciliation" fr "Réconciliation manuelle"]
	noSuggestion [en "No suggestion for this tab, other options (if any):" fr "Aucune suggestion dans cet onglet, autre choix (si disponible) :"]
}

// Dialog to confirm reconciliation
bw_recon_confirm = Dialog {
	title: $bw_recon_review_standaloneNLS.confirmdialog
	height: 240
	width: 640
	buttons:
		[
			ActionButton {
				actions: 
					Call srv_reconciliation_owner ( localAccountRecordUid to accountRecordUid, localIdentityUid to identityUid, localComment to comment, localResult from result),
					Set $bw_recon_review_standaloneNLS.okCode to localStatus
				close: True
				text: $bw_recon_review_standaloneNLS.ok
			}
			CancelButton
		]
	
	localAccountRecordUid = Variable { type: String }
	localIdentityUid = Variable { type: String }
	localIdentityFullname = Variable { type: String }
	localAccountLogin = Variable { type: String }
	localComment = Variable { type: String }
	localStatus =  Variable { type: String initial: $bw_recon_review_standaloneNLS.koCode}
	localResult = Variable { type: String }
	
	Text {
		label: $bw_recon_review_standaloneNLS.sure
		value: $bw_recon_review_standaloneNLS.suretxt
		compact: True
	}
	Text {
		value: localIdentityFullname
		label: $identity.concept
		compact: True
	}
	Text {
		value: localAccountLogin
		label: $account.concept
		compact: True
	}
	Edit {
		variable: localComment
		label: $bw_recon_review_standaloneNLS.reconComment
	}
}

// Standalone Reconciliation Page
bw_recon_review_standalone = Page {
	title: $bw_recon_review_standaloneNLS.title
	feature: bw_recon
	tags: "admin"
	icon: "16/audit/reconciliation_16.png"
	large-icon: "48/audit/reconciliation_48.png"
	
	// Defaults
	noownercode = Variable { type: String initial: $bw_recon_review_standaloneNLS.defaultNoOwner }
	notReconciled = Variable { type: Boolean initial: False }
	fuzzynb = Variable { type: Integer initial: 2 }
	
	// Current selection
	currentAccountRecordUid = Variable { type: String }
	currentAccountUid = Variable { type: String }
	currentAccountLogin = Variable { type: String }
	currentIdentityUid = Variable { type: String }
	currentIdentityFullname = Variable { type: String }
	currentAccountsUids = Variable { type: String multivalued: True }
	currentRepository = Variable { type: String }
	
	/*MJa */
	currentTab = Variable { type: String }
	
	// Current account variables
	acc_hrcode = Variable { type: String }
	acc_fullname = Variable { type: String }
	acc_mail = Variable { type: String }
	acc_surname = Variable { type: String }
	acc_givenname = Variable { type: String }
	
	// Recon
	reconResult = Variable { type: String }
	reconStatus = Variable { type: String initial: $bw_recon_review_standaloneNLS.koCode}
	reconComment = Variable { type: String initial: $bw_recon_review_standaloneNLS.reconCommentDefault}
	delComment = Variable { type: String initial: $bw_recon_review_standaloneNLS.delCommentDefault }
	reconId  = Variable { type: String }
	
	// Count results
	ids = Variable { type: String multivalued: True }
	nbIds = Variable { type: Integer }
	idsMail = Variable { type: String multivalued: True }
	nbIdsMail = Variable { type: Integer }
	idsSurname = Variable { type: String multivalued: True }
	nbIdsSurname = Variable { type: Integer }
	idsGivenname = Variable { type: String multivalued: True }
	nbIdsGivenname = Variable { type: Integer }
	idsHRCode = Variable { type: String multivalued: True }
	nbIdsHRCode = Variable { type: Integer }
	idsFullname = Variable { type: String multivalued: True }
	nbIdsFullname = Variable { type: Integer }
	// Tabbed text for number of results
	strIds = Variable { type: String initial: Concat($bw_recon_review_standaloneNLS.allCriteria, "(0)") }
	strIdsMail = Variable { type: String initial: Concat($identity.mail, "(0)") }
	strIdsSurname = Variable { type: String initial: Concat($identity.surname, "(0)") }
	strIdsGivenname = Variable { type: String initial: Concat($identity.givenname, "(0)") }
	strIdsHRCode = Variable { type: String initial: Concat($identity.hrcode, "(0)") }
	strIdsFullname = Variable { type: String initial: Concat($identity.fullname, "(0)") }
	
	accounts = Dataset {
		view: bw_recon_accounts with noownercode to noownercode, currentRepository to repouid, notReconciled to notReconciled
	}
	
	account = Record {
		view: bw_recon_accounts with noownercode to noownercode, currentAccountUid to accuid, currentRepository to repouid, notReconciled to notReconciled
	}
	
	repos = Dataset {
		view: bw_recon_repos
	}
	
	recontypes = Dataset {
		view: bw_recon_noowners
	}
	
	identities = Dataset {
		view: bw_recon_identities with
			acc_hrcode to hrcode, 
			acc_fullname to fullname, 
			acc_surname to surname, 
			acc_givenname to givenname, 
			acc_mail to mail,
			currentAccountUid to accountuid
		disabled: StringPredicate ( currentAccountUid ) { when IsEmpty then True otherwise False }
		excludes:
			OrPredicate {
				StringPredicate ( currentAccountUid ) {
					when IsEmpty then True
				}
				AndPredicate { // If all the fields are null : prevent view from returning all identities
					StringPredicate ( acc_hrcode ) { when IsEmpty then True }
					StringPredicate ( acc_fullname ) { when IsEmpty then True }
					StringPredicate ( acc_surname ) { when IsEmpty then True }
					StringPredicate ( acc_givenname ) { when IsEmpty then True }
					StringPredicate ( acc_mail ) { when IsEmpty then True }
				}
			}
	}
	identities_mail = Dataset {
		view: bw_recon_identities with
			acc_mail to mail,
			currentAccountUid to accountuid
		disabled: StringPredicate ( currentTab ) { when "3" then False otherwise True }
		excludes:
			OrPredicate {
				StringPredicate ( currentAccountUid ) { when IsEmpty then True }
				StringPredicate ( acc_mail ) { when IsEmpty then True }
			}
	}
	identities_givenname = Dataset {
		view: bw_recon_identities with
			acc_givenname to givenname, 
			currentAccountUid to accountuid
		disabled: StringPredicate ( currentTab ) { when "6" then False otherwise True }
		excludes:
			OrPredicate {
				StringPredicate ( currentAccountUid ) { when IsEmpty then True }
				StringPredicate ( acc_givenname ) { when IsEmpty then True }
			}
	}
	identities_surname = Dataset {
		view: bw_recon_identities with
			acc_surname to surname,
			currentAccountUid to accountuid
		disabled: StringPredicate ( currentTab ) { when "5" then False otherwise True }
		excludes:
			OrPredicate {
				StringPredicate ( currentAccountUid ) { when IsEmpty then True }
				StringPredicate ( acc_surname ) { when IsEmpty then True }
			}
	}
	identities_fullname = Dataset {
		view: bw_recon_identities with
			acc_fullname to fullname, 
			currentAccountUid to accountuid
		disabled: StringPredicate ( currentTab ) { when "1" then False otherwise True }
		excludes:
			OrPredicate {
				StringPredicate ( currentAccountUid ) { when IsEmpty then True }
				StringPredicate ( acc_fullname ) { when IsEmpty then True }
			}
	}
	identities_hrcode = Dataset {
		view: bw_recon_identities with
			acc_hrcode to hrcode,
			currentAccountUid to accountuid
		disabled: StringPredicate ( currentTab ) { when "2" then False otherwise True }
		excludes:
			OrPredicate {
				StringPredicate ( currentAccountUid ) { when IsEmpty then True }
				StringPredicate ( acc_hrcode ) { when IsEmpty then True }
			}
	}
	
	Splitter {
		size: 50%
		disposition: Horizontal
		// Accounts
		Group {
			title: $bw_recon_review_standaloneNLS.accounts
			// Option to filter on a repo
			Combo {
				label: $bw_recon_review_standaloneNLS.repo
				options: 
					Dynamic {
						data: repos
						text: Current repo_displayname
						value: Current repo_uid
					}
				allow-none: True
				variable: currentRepository
			}
			Group {
				title: $bw_recon_review_standaloneNLS.filterChooseOne
				layout: Layout { grab: horizontal True vertical False }
				Flow {
					disposition: Horizontal
					Group {
						// Option to filter on a recon type (no owner)
						Combo {
							label: $bw_recon_review_standaloneNLS.recontype
							options: 
								Dynamic {
									data: recontypes
									text: Current recon_noownercode
									value: Current recon_noownercode
								}
							variable: noownercode
							modify-event:
								Set False to notReconciled
						}
					}
					Group {
						// Option to filter on non reconciled accounts
						Checkbox {
							label: $bw_recon_review_standaloneNLS.notReconciled
							variable: notReconciled
							modify-event:
								Set "" to noownercode
						}
					}
				}
			}
			// List of accounts
			Group {
				PaginatedTable {
					layout: Layout { grab: horizontal True vertical True }
					data: accounts
					configurable: True
					hide-header: False
					initial-sort: acc_login
					page-size:50
//					show-count: True
					show-filter: True
					selection-changed-event:
						// Set Account variables
						Set account.acc_employeenumber to acc_hrcode,
						Set account.acc_username to acc_fullname,
						Set account.acc_givenname to acc_givenname,
						Set account.acc_surname to acc_surname,
						Set account.acc_mail to acc_mail//,
						// Count results
//						TransferData identities ( id_uid ) to ( ids ),
//						Set SizeOf ids to nbIds,
//						TransferData identities_fullname ( id_uid ) to ( idsFullname ),
//						Set SizeOf idsFullname to nbIdsFullname,
//						TransferData identities_givenname ( id_uid ) to ( idsGivenname ),
//						Set SizeOf idsGivenname to nbIdsGivenname,
//						TransferData identities_hrcode ( id_uid ) to ( idsHRCode ),
//						Set SizeOf idsHRCode to nbIdsHRCode,
//						TransferData identities_mail ( id_uid ) to ( idsMail ),
//						Set SizeOf idsMail to nbIdsMail,
//						TransferData identities_surname ( id_uid ) to ( idsSurname ),
//						Set SizeOf idsSurname to nbIdsSurname,
						// Update tab texts
//						Set Concat( $bw_recon_review_standaloneNLS.allCriteria, " (", nbIds, ")") to strIds,
//						Set Concat( $identity.hrcode, " (", nbIdsHRCode, ")") to strIdsHRCode,
//						Set Concat( $identity.mail, " (", nbIdsMail, ")") to strIdsMail,
//						Set Concat( $identity.fullname, " (", nbIdsFullname, ")") to strIdsFullname,
//						Set Concat( $identity.surname, " (", nbIdsSurname, ")") to strIdsSurname,
//						Set Concat( $identity.givenname, " (", nbIdsGivenname, ")") to strIdsGivenname
					Column {
						column: acc_uid
						header: $paccount.uid
						hidden: True
						selection: currentAccountUid
					}
					Column {
						column: acc_recorduid
						header: $paccount.recorduid
						hidden: True
						selection: currentAccountRecordUid
					}
					Column {
						column: acc_identifier
						header: $paccount.identifier
						sortable: False
						filterable: True
						width: 100%
					}
					Column {
						column: acc_login
						header: $paccount.login
						sortable: True
						filterable: True
						width: 100%
						selection: currentAccountLogin
					}
					Column {
						column: acc_username
						header: $paccount.username
						sortable: True
						filterable: True
						width: 100%
					}
					Column {
						column: _noownercode
						header: $reconciliation.noownercode
						sortable: True
						width: 100%
					}
					Column {
						column: repo_code
						header: $prepository.code
						sortable: True
						filterable: True
						width: 100%
					}
				}
			}
			Group {
				// Recon dialog
				title: $bw_recon_review_standaloneNLS.requestRecon
				layout: Layout { grab: horizontal True vertical False }
				Edit {
					label: $bw_recon_review_standaloneNLS.reconComment
					variable: reconComment
				}
				Button {
					actions:
						Dialog reconciliationIdentityDialog ( currentAccountRecordUid to inAccountRecordUid, currentAccountLogin to inAccountLogin, reconResult from outResult, reconId from localIdentityUid, reconComment to localComment, reconComment from localComment ),
						Flash reconResult,
						Set "" to reconId,
						Set "" to reconResult
					text: $bw_recon_review_standaloneNLS.manualrecon
					tooltip: $bw_recon_review_standaloneNLS.manualrecontt
					image: "16/audit/reconciliation_16.png"
					disabled:
						OrPredicate {
							StringPredicate ( currentAccountUid ) {
								when IsEmpty then True
							}
							StringPredicate ( reconComment ) {
								when IsEmpty then True
							}
						}
				}
			}
		}
		// Identities
		Group {
			title: $bw_recon_review_standaloneNLS.identities
			// List of identities
			TabFolder {
				// Ids on all criterias
				TabItem {
					text: $bw_recon_review_standaloneNLS.allCriteria
					activation-event:
						Unset currentIdentityUid
//					Group {
//						hidden: IntPredicate ( nbIds ) { when > 0 then True }
//						Text {
//							value: $bw_recon_review_standaloneNLS.noSuggestion
//							compact: True
//						}
//						Text {
//							label: $bw_recon_review_standaloneNLS.allCriteria
//							value: nbIds
//							compact: True
//							hidden: IntPredicate ( nbIds ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.hrcode
//							value: nbIdsHRCode
//							compact: True
//							hidden: IntPredicate ( nbIdsHRCode ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.mail
//							value: nbIdsMail
//							compact: True
//							hidden: IntPredicate ( nbIdsMail ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.fullname
//							value: nbIdsFullname
//							compact: True
//							hidden: IntPredicate ( nbIdsFullname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.surname
//							value: nbIdsSurname
//							compact: True
//							hidden: IntPredicate ( nbIdsSurname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.givenname
//							value: nbIdsGivenname
//							compact: True
//							hidden: IntPredicate ( nbIdsGivenname ) { when < 1 then True }
//						}
//					}
					PaginatedTable {
//						hidden:
//							IntPredicate ( nbIds ) { when < 1 then True }
						layout: Layout { grab: horizontal True vertical True }
						data: identities
						disabled: StringPredicate ( currentAccountUid ) { when IsEmpty then True otherwise False }
						configurable: True
						hide-header: False
						initial-sort: id_fullname
						page-size: 10
//						show-count: True
						show-filter: True
						Column {
							column: id_uid
							header: $identity.uid
							hidden: True
							selection: currentIdentityUid
						}
						Column {
							column: id_fullname
							header: $identity.fullname
							sortable: True
							filterable: True
							width: 100%
							selection: currentIdentityFullname
						}
						Column {
							column: id_surname
							header: $identity.surname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_givenname
							header: $identity.givenname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_mail
							header: $identity.mail
							sortable: True
							filterable: True
							width: 100%
						}
					}
				}
				// Ids on hrcode
				TabItem {
					text: $identity.hrcode
					activation-event:
						Unset currentIdentityUid , Set "2" to currentTab
//					Group {
//						hidden: IntPredicate ( nbIdsHRCode ) { when > 0 then True }
//						Text {
//							value: $bw_recon_review_standaloneNLS.noSuggestion
//							compact: True
//						}
//						Text {
//							label: $bw_recon_review_standaloneNLS.allCriteria
//							value: nbIds
//							compact: True
//							hidden: IntPredicate ( nbIds ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.hrcode
//							value: nbIdsHRCode
//							compact: True
//							hidden: IntPredicate ( nbIdsHRCode ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.mail
//							value: nbIdsMail
//							compact: True
//							hidden: IntPredicate ( nbIdsMail ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.fullname
//							value: nbIdsFullname
//							compact: True
//							hidden: IntPredicate ( nbIdsFullname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.surname
//							value: nbIdsSurname
//							compact: True
//							hidden: IntPredicate ( nbIdsSurname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.givenname
//							value: nbIdsGivenname
//							compact: True
//							hidden: IntPredicate ( nbIdsGivenname ) { when < 1 then True }
//						}
//					}
					PaginatedTable {
//						hidden:
//							IntPredicate ( nbIdsHRCode ) { when < 1 then True }
						layout: Layout { grab: horizontal True vertical True }
						data: identities_hrcode
						disabled: StringPredicate ( currentTab ) { when "2" then False otherwise True }
						configurable: True
						hide-header: False
						initial-sort: id_fullname
						page-size:10
//						show-count: True
						show-filter: True
						Column {
							column: id_uid
							header: $identity.uid
							hidden: True
							selection: currentIdentityUid
						}
						Column {
							column: id_fullname
							header: $identity.fullname
							sortable: True
							filterable: True
							width: 100%
							selection: currentIdentityFullname
						}
						Column {
							column: id_surname
							header: $identity.surname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_givenname
							header: $identity.givenname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_mail
							header: $identity.mail
							sortable: True
							filterable: True
							width: 100%
						}
					}
				}
				// Ids on mail
				TabItem {
					text: $identity.mail
					activation-event:
						Unset currentIdentityUid , Set "3" to currentTab
//					Group {
//						hidden: IntPredicate ( nbIdsMail ) { when > 0 then True }
//						Text {
//							value: $bw_recon_review_standaloneNLS.noSuggestion
//							compact: True
//						}
//						Text {
//							label: $bw_recon_review_standaloneNLS.allCriteria
//							value: nbIds
//							compact: True
//							hidden: IntPredicate ( nbIds ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.hrcode
//							value: nbIdsHRCode
//							compact: True
//							hidden: IntPredicate ( nbIdsHRCode ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.mail
//							value: nbIdsMail
//							compact: True
//							hidden: IntPredicate ( nbIdsMail ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.fullname
//							value: nbIdsFullname
//							compact: True
//							hidden: IntPredicate ( nbIdsFullname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.surname
//							value: nbIdsSurname
//							compact: True
//							hidden: IntPredicate ( nbIdsSurname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.givenname
//							value: nbIdsGivenname
//							compact: True
//							hidden: IntPredicate ( nbIdsGivenname ) { when < 1 then True }
//						}
//					}
					PaginatedTable {
//						hidden:
//							IntPredicate ( nbIdsMail ) { when < 1 then True }
						layout: Layout { grab: horizontal True vertical True }
						data: identities_mail
						disabled: StringPredicate ( currentTab ) { when "3" then False otherwise True }configurable: True
						hide-header: False
						initial-sort: id_fullname
						page-size:10
//						show-count: True
						show-filter: True
						Column {
							column: id_uid
							header: $identity.uid
							hidden: True
							selection: currentIdentityUid
						}
						Column {
							column: id_fullname
							header: $identity.fullname
							sortable: True
							filterable: True
							width: 100%
							selection: currentIdentityFullname
						}
						Column {
							column: id_surname
							header: $identity.surname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_givenname
							header: $identity.givenname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_mail
							header: $identity.mail
							sortable: True
							filterable: True
							width: 100%
						}
					}
				}
				// Ids on fullname
				TabItem {
					text: $identity.fullname
					activation-event:
						Unset currentIdentityUid , Set "4" to currentTab
//					Group {
//						hidden: IntPredicate ( nbIdsFullname ) { when > 0 then True }
//						Text {
//							value: $bw_recon_review_standaloneNLS.noSuggestion
//							compact: True
//						}
//						Text {
//							label: $bw_recon_review_standaloneNLS.allCriteria
//							value: nbIds
//							compact: True
//							hidden: IntPredicate ( nbIds ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.hrcode
//							value: nbIdsHRCode
//							compact: True
//							hidden: IntPredicate ( nbIdsHRCode ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.mail
//							value: nbIdsMail
//							compact: True
//							hidden: IntPredicate ( nbIdsMail ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.fullname
//							value: nbIdsFullname
//							compact: True
//							hidden: IntPredicate ( nbIdsFullname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.surname
//							value: nbIdsSurname
//							compact: True
//							hidden: IntPredicate ( nbIdsSurname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.givenname
//							value: nbIdsGivenname
//							compact: True
//							hidden: IntPredicate ( nbIdsGivenname ) { when < 1 then True }
//						}
//					}
					PaginatedTable {
//						hidden:
//							IntPredicate ( nbIdsFullname ) { when < 1 then True }
						layout: Layout { grab: horizontal True vertical True }
						data: identities_fullname
						disabled: StringPredicate ( currentTab ) { when "1" then False otherwise True }
						configurable: True
						hide-header: False
						initial-sort: id_fullname
						page-size:10
//						show-count: True
						show-filter: True
						Column {
							column: id_uid
							header: $identity.uid
							hidden: True
							selection: currentIdentityUid
						}
						Column {
							column: id_fullname
							header: $identity.fullname
							sortable: True
							filterable: True
							width: 100%
							selection: currentIdentityFullname
						}
						Column {
							column: id_surname
							header: $identity.surname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_givenname
							header: $identity.givenname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_mail
							header: $identity.mail
							sortable: True
							filterable: True
							width: 100%
						}
					}
				}
				// Ids on surname
				TabItem {
					text: $identity.surname
					activation-event:
						Unset currentIdentityUid , Set "5" to currentTab
//					Group {
//						hidden: IntPredicate ( nbIdsSurname ) { when > 0 then True }
//						Text {
//							value: $bw_recon_review_standaloneNLS.noSuggestion
//							compact: True
//						}
//						Text {
//							label: $bw_recon_review_standaloneNLS.allCriteria
//							value: nbIds
//							compact: True
//							hidden: IntPredicate ( nbIds ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.hrcode
//							value: nbIdsHRCode
//							compact: True
//							hidden: IntPredicate ( nbIdsHRCode ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.mail
//							value: nbIdsMail
//							compact: True
//							hidden: IntPredicate ( nbIdsMail ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.fullname
//							value: nbIdsFullname
//							compact: True
//							hidden: IntPredicate ( nbIdsFullname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.surname
//							value: nbIdsSurname
//							compact: True
//							hidden: IntPredicate ( nbIdsSurname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.givenname
//							value: nbIdsGivenname
//							compact: True
//							hidden: IntPredicate ( nbIdsGivenname ) { when < 1 then True }
//						}
//					}
					PaginatedTable {
//						hidden:
//							IntPredicate ( nbIdsSurname ) { when < 1 then True }
						layout: Layout { grab: horizontal True vertical True }
						data: identities_surname
						disabled: StringPredicate ( currentTab ) { when "5" then False otherwise True }
						configurable: True
						hide-header: False
						initial-sort: id_fullname
						page-size:10
//						show-count: True
						show-filter: True
						Column {
							column: id_uid
							header: $identity.uid
							hidden: True
							selection: currentIdentityUid
						}
						Column {
							column: id_fullname
							header: $identity.fullname
							sortable: True
							filterable: True
							width: 100%
							selection: currentIdentityFullname
						}
						Column {
							column: id_surname
							header: $identity.surname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_givenname
							header: $identity.givenname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_mail
							header: $identity.mail
							sortable: True
							filterable: True
							width: 100%
						}
					}
				}
				// Ids on givenname
				TabItem {
					text: $identity.givenname
					activation-event:
						Unset currentIdentityUid , Set "6" to currentTab
//					Group {
//						hidden: IntPredicate ( nbIdsGivenname ) { when > 0 then True }
//						Text {
//							value: $bw_recon_review_standaloneNLS.noSuggestion
//							compact: True
//						}
//						Text {
//							label: $bw_recon_review_standaloneNLS.allCriteria
//							value: nbIds
//							compact: True
//							hidden: IntPredicate ( nbIds ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.hrcode
//							value: nbIdsHRCode
//							compact: True
//							hidden: IntPredicate ( nbIdsHRCode ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.mail
//							value: nbIdsMail
//							compact: True
//							hidden: IntPredicate ( nbIdsMail ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.fullname
//							value: nbIdsFullname
//							compact: True
//							hidden: IntPredicate ( nbIdsFullname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.surname
//							value: nbIdsSurname
//							compact: True
//							hidden: IntPredicate ( nbIdsSurname ) { when < 1 then True }
//						}
//						Text {
//							label: $identity.givenname
//							value: nbIdsGivenname
//							compact: True
//							hidden: IntPredicate ( nbIdsGivenname ) { when < 1 then True }
//						}
//					}
					PaginatedTable {
//						hidden:
//							IntPredicate ( nbIdsGivenname ) { when < 1 then True }
						layout: Layout { grab: horizontal True vertical True }
						data: identities_givenname
						disabled: StringPredicate ( currentTab ) { when "6" then False otherwise True }
						configurable: True
						hide-header: False
						initial-sort: id_fullname
						page-size:10
//						show-count: True
						show-filter: True
						Column {
							column: id_uid
							header: $identity.uid
							hidden: True
							selection: currentIdentityUid
						}
						Column {
							column: id_fullname
							header: $identity.fullname
							sortable: True
							filterable: True
							width: 100%
							selection: currentIdentityFullname
						}
						Column {
							column: id_surname
							header: $identity.surname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_givenname
							header: $identity.givenname
							sortable: True
							filterable: True
							width: 100%
						}
						Column {
							column: id_mail
							header: $identity.mail
							sortable: True
							filterable: True
							width: 100%
						}
					}
				}
			}
			// Recon buttons
			Group {
				title: $bw_recon_review_standaloneNLS.manualReconGp
				layout: Layout { grab: horizontal True vertical False }
				Edit {
					label: $bw_recon_review_standaloneNLS.reconComment
					variable: reconComment
				}
				Button {
					text: $bw_recon_review_standaloneNLS.idrecon
					tooltip: $bw_recon_review_standaloneNLS.idrecontt
					image: "16/audit/reconciliation_identity.png"
					actions: 
						Dialog bw_recon_confirm ( currentAccountLogin to localAccountLogin, currentAccountRecordUid to localAccountRecordUid, currentIdentityUid to localIdentityUid, currentIdentityFullname to localIdentityFullname, reconComment to localComment, reconResult from localResult, reconStatus from localStatus, reconId from localIdentityUid, reconComment from localComment),
						StringCase ( reconStatus ) {
							when $bw_recon_review_standaloneNLS.okCode then [
								Flash reconResult,
								Set "" to reconStatus
							]
						}
					disabled:
						OrPredicate {
							StringPredicate ( currentIdentityUid ) {
								when IsEmpty then True
							}
							StringPredicate ( currentAccountUid ) {
								when IsEmpty then True
							}
							StringPredicate ( reconComment ) {
								when IsEmpty then True
							}
						}
				}	
			}
		}
	}
}