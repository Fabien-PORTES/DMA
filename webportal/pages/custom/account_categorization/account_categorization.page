/* Import other pages here */
import "/webportal/pages/custom/resources/DMA_nls.page"
import "/webportal/pages/mixins/workflow_mixins.page"
import "/webportal/pages/resources/pickers.page"
import "/webportal/pages/resources/mappings.page"
import "/webportal/pages/workflow/account_categorization_automation/account_categorization_automation.page"
/* Nationalized labels here */

account_categorization = Page {
	title: $account_categorizationNLS.title
	tags: "DMA_homepage"	
	icon: "16/red/job.png"
	large-icon: "48/audit/job_48.png" 
	/* Dock here */
	/* parameters here */	
	inaccount_uids = Parameter {
		type: String
		hidden: True
		mandatory: False
	}	
	inticket_review_recorduids = Parameter {
		type: Integer
		hidden: True
		multivalued: True
		mandatory: False
		}
	/* variables here */
	comment = Variable {
		type: String
	}
	modified_uid = Variable {
		type: String
	}
	modified_uid_number = Variable {
		type: String
	}
	modified_GECOS = Variable {
		type: String
	}
	modified_samaccountname = Variable {
		type: String
	}	
	erase_categorisation = Variable {
		type: String
		initial:True
		}
	account_categorisation = Variable {
		type: String
		}
	add_accounts = Variable {
		type: String
		}
	selected_accounts = Variable {
		type: String
		multivalued: True
		initial: inaccount_uids
		}
	current_available_account = Variable {
		type: String
		}		
	current_selected_account = Variable {
		type: String
		}		
	/* Datasets and records here */
task = TaskRecord ( create "account_categorization" )	
accounts_to_categorize = Dataset {
	view: account_categorization_accounts_to_categorize with selected_accounts to account_uids
	}
availabe_accounts = Dataset {
	view: available_NIS_accounts with selected_accounts to account_uids
	}
	
	/* page content */
	
Group {
		Button {
			actions: Dialog account_categorization_automation
			text: $account_categorization_automationNLS.title
			layout: Layout { grab: horizontal False vertical False }
		}
	}


Splitter {
	disposition: Vertical
	size: 40%
	Flow {
		disposition: Horizontal
			Grid {columns:GridColumn { fill: True }, GridColumn { fill: False width: ( maximum 60px ) }, GridColumn { fill: True }
				GridRow {
					GridCell {
						Group {
							layout: Layout { grab: horizontal True vertical True }						
							title: "Available accounts"
							PaginatedTable {
							layout: Layout { grab: horizontal True vertical True }
								data: availabe_accounts
								show-filter: True
								page-size: 20
								configurable: True
								persist-configuration: True
								double-click: MultivaluedAdd Current account_uid to selected_accounts
									Column {
										column: account_uid
										hidden: True
										selection: current_available_account
										}
									Column {
										column: displayname
										header: $accountNISAttributes.repository
										filterable: True
										width: 25%
										}
									Column {
										column: account_login
										header: $accountNISAttributes.Login
										filterable: True
										}
									Column {
										column: account_custom4
										header: $accountNISAttributes.custom4
										filterable: True
										width: 25%
										}
									Column {
										column: account_username
										header: $accountNISAttributes.username
										filterable: True
										width: 25%
										}									
									}
								}
							}					
					GridCell {
						align: leading 
						Group {
							Grid {
								columns: GridColumn {}
									GridRow {
										GridCell {
											Button {
												layout: Layout { grab: horizontal True vertical True }
												actions:
													MultivaluedAdd current_available_account to selected_accounts
												text: ">"
												disabled: StringPredicate ( current_available_account ) {
													when IsEmpty then True
													}
												}
											}
										}
									GridRow {
										GridCell {
											Button {
												layout: Layout { grab: horizontal True vertical True }											
												actions:
													MultivaluedRemove current_selected_account from selected_accounts
												text: "<"
												disabled:StringPredicate ( current_selected_account ) {
													when IsEmpty then True
													}
												}
											}
										}
									}
								}
							}
					GridCell {
						Group {
							layout: Layout { grab: horizontal True vertical True }								
							title: "Accounts to categorize"
							PaginatedTable {
							layout: Layout { grab: horizontal True vertical True }
								data: accounts_to_categorize
								page-size: 10
								show-filter: True
								configurable: True
								persist-configuration: True
								double-click: MultivaluedRemove Current account_uid from selected_accounts
									Column {
										column: account_uid
										hidden: True
										selection: current_selected_account
										}
									Column {
										column: displayname
										header: $accountNISAttributes.repository
										filterable: True
										width: 25%
										}
									Column {
										column: account_login
										header: $accountNISAttributes.Login
										filterable: True
										}
									Column {
										column: account_custom4
										header: $accountNISAttributes.custom4
										filterable: True
										width: 25%
										}
									Column {
										column: account_username
										header: $accountNISAttributes.username
										filterable: True
										width: 25%
										}									
									}
								}
							}							
						}
					}
				}
	Group {
		border: True
		Combo {
			variable: account_categorisation
			label:$account_categorizationNLS.dialog.combo
			allow-none: False
			options: Static {
					Option {text: Transform $account_categorizationNLS.option_empty using optionStringMapping  value:$account_categorizationNLS.option_empty}
					Option {text: $account_categorizationNLS.option1 value:$account_categorizationNLS.option1}
					Option {text: $account_categorizationNLS.option2 value:$account_categorizationNLS.option2}	
					Option {text: $account_categorizationNLS.option3  value:$account_categorizationNLS.option3}
					Option {text: $account_categorizationNLS.option4  value:$account_categorizationNLS.option4}	
					Option {text: $account_categorizationNLS.option5  value:$account_categorizationNLS.option5}
					Option {text: $account_categorizationNLS.option6  value:$account_categorizationNLS.option6}
					Option {text: $account_categorizationNLS.option7  value:$account_categorizationNLS.option7}
					Option {text: $account_categorizationNLS.option8  value:$account_categorizationNLS.option8}	
					Option {text: $account_categorizationNLS.option9  value:$account_categorizationNLS.option9}
					Option {text: $account_categorizationNLS.option10 value:$account_categorizationNLS.option10}	
					Option {text: $account_categorizationNLS.option11 value:$account_categorizationNLS.option11}
					Option {text: $account_categorizationNLS.option12 value:$account_categorizationNLS.option12}
					Option {text: $account_categorizationNLS.option13 value:$account_categorizationNLS.option13}
					Option {text: $account_categorizationNLS.option14 value:$account_categorizationNLS.option14}	
					Option {text: $account_categorizationNLS.option15 value:$account_categorizationNLS.option15}
					Option {text: $account_categorizationNLS.option16 value:$account_categorizationNLS.option16}	
					Option {text: $account_categorizationNLS.option17 value:$account_categorizationNLS.option17}
					Option {text: $account_categorizationNLS.option18 value:$account_categorizationNLS.option18}						
					Option {text: $account_categorizationNLS.option19 value:$account_categorizationNLS.option19}
					Option {text: $account_categorizationNLS.option20  value:$account_categorizationNLS.option20}						
						}
				}
		Edit {
			label: $account_categorizationNLS.dialog.comment
			layout:Layout{hint:height 64}
			multi-lines: True
			variable: comment
			}
		Group {
			title:$account_categorizationNLS.dialog.modify_value
		Edit {
			label: $account_categorizationNLS.dialog.uid
			layout:Layout{hint:height 64}
			multi-lines: True
			variable: modified_uid
			}
		Edit {
			label: $account_categorizationNLS.dialog.uid_number
			layout:Layout{hint:height 64}
			multi-lines: True
			variable: modified_uid_number
			}
		Edit {
			label: $account_categorizationNLS.dialog.GECOS
			layout:Layout{hint:height 64}
			multi-lines: True
			variable: modified_GECOS
			}
		Edit {
			label: $account_categorizationNLS.dialog.samaccountname
			layout:Layout{hint:height 64}
			multi-lines: True
			variable: modified_samaccountname
			}
			}
		}
	}	
	ButtonGroup {
	mixins: workflowActionsMixin
	Button {
		text: "Ok"
		disabled: StringPredicate (comment) {
			when IsEmpty then True
			otherwise False
		}
		actions: Set comment to task.comment,
		Set selected_accounts to task.accounts,
		Set account_categorisation to task.account_categorisation_label,
		Set erase_categorisation to task.erase_categorisation,
		Set modified_uid to task.account_uid,
		Set modified_uid_number to task.account_uid_number,
		Set modified_GECOS to task.account_GECOS,
		Set modified_samaccountname to task.account_samaccountname,				
		TaskComplete task,
		Flash $account_categorizationNLS.dialog.flash,
		GoTo HomePage
	}
	Button {
		text: "Cancel"
		actions: TaskCancel task,
		GoTo HomePage
		}
	}
}